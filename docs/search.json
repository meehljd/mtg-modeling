[
  {
    "objectID": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html",
    "href": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html",
    "title": "Quarto Basics",
    "section": "",
    "text": "Exploratory data analysis of draft data (e.g. win rates)"
  },
  {
    "objectID": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#color-decks",
    "href": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#color-decks",
    "title": "Quarto Basics",
    "section": "Color Decks",
    "text": "Color Decks\nLet’s explore the color decks.\n\nColor Frequency\nFirst I will look at the number of decks drafted for each color set. The 10 two-color decks are the most frequent. The Bloomburrow set is design for 10 two-color animal tribes, so this aligns with the design intent of the set. Mono-color and multi-color decks are much lest frequent.\nThe Black-Green Squirrels: Forage decks and the White-Green Rabbits: Go-Wide decks are by far the most popular. Most decks using Blue are much less favored.\nSee Figure 1\n\n\nCode\ncolors = df_draft.group_by(\"main_colors\").len().sort(by='len', descending=True).collect()\ncolors = colors.to_pandas()\nfreq_mu = colors[\"len\"].head(10).mean()\n\nplt.axvline(\n    freq_mu, color=\"gray\", linestyle=\"--\", linewidth=2, alpha=0.5\n)\nsns.barplot(data=colors.head(30), x=\"len\", y=\"main_colors\")\nplt.title(\"Frequency of Draft Deck Colors\")\nplt.xlabel(r\"Frequency ($\\mu_{\\text{top}10}$=\" + f\"{freq_mu:,.0f})\")\nplt.ylabel(\"Draft Color Combinations\")\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis\n\n\n\n\n\nSince Bloomburrow is designed with 2-color tribal decks in mind, I will focus on these pairings. The most frequent drafted decks are Black-Green, White-Green, and Red-White. The least drafted are Blue-Black, Blue-Red and White-Blue.\n\n\nCode\ncolors['use_rate'] = colors['len'] / colors['len'].sum()\ncolors = colors.sort_values(\"use_rate\", ascending=False)\n\ntwo_colors = colors[colors[\"main_colors\"].str.len() == 2]\n\nuse_rate_mu = two_colors[\"use_rate\"].mean()\n\nplt.axvline(\n    use_rate_mu, color=\"gray\", linestyle=\"--\", linewidth=2, alpha=0.5\n)\nsns.barplot(data=two_colors, x=\"use_rate\", y=\"main_colors\")\nplt.title(\"Use Rate of 2-Color Drafts\")\nplt.xlabel(f\"Use Rate (μ={use_rate_mu:0.3f})\")\nplt.ylabel(\"Draft Two-Color Combinations\")\nplt.show()\n\n\n\n\n\n\n\n\n\nNext let’s look at the color composition of the decks. Below we can see that Green is the most frequently drafted color, with Black and White also favored. Red and Blue are much less frequent.\nThe average draft use rate per component color is 40.0%.\n\n\nCode\nfor color in ['W', 'U', 'B', 'R', 'G']:\n    colors[color] = colors['main_colors'].apply(lambda x: True if color in x else False)\n\ndfs = []\nfor color in ['W', 'U', 'B', 'R', 'G']:\n    sums = colors[['len', color]].groupby(color).sum()\n    use_rate = (sums.loc[True] / sums.sum()).values[0]\n    dfs.append(pd.DataFrame({\"color\": color, \"use_rate\": use_rate}, index=[0]))\ndf = pd.concat(dfs).sort_values(\"use_rate\", ascending=False).reset_index(drop=True)\n\nuse_rate_mu = df[\"use_rate\"].mean()\nplt.axvline(use_rate_mu, color=\"gray\", linestyle=\"--\", linewidth=2, alpha=0.5)\ng = sns.barplot(data=df, x=\"use_rate\", y=\"color\")\ng.set(xlim=(0.25, 0.58))\nplt.title(\"Component Color Use Rate in Drafts\")\nplt.xlabel(f\"Use Rate (μ={use_rate_mu:0.3f})\")\nplt.ylabel(\"Component Color of Drafts\")\nplt.show()\n\n\n\n\n\n\n\n\n\nDeck use over time\n…\n\n\nCode\ncolor_time = (\n    (\n        df_draft.filter(\n            pl.col(\"main_colors\").str.len_chars() == 2,\n        )\n        .group_by(pl.col(\"draft_time\").dt.truncate(\"3d\"), pl.col(\"main_colors\"))\n        .agg(\n            pl.col(\"n_games\").sum(),\n            pl.col(\"n_wins\").sum(),\n        )\n        .sort(by=[\"draft_time\", \"n_games\"], descending=[False, True])\n    )\n    .with_columns(pl.col(\"draft_time\") + timedelta(days=2))\n    .collect()\n    .to_pandas()\n)\n\nrank_time_sum = (\n    color_time[[\"draft_time\", \"n_games\"]].groupby([\"draft_time\"]).sum().reset_index()\n)\n\ncolor_time = color_time.merge(\n    rank_time_sum, on=\"draft_time\", suffixes=(\"\", \"_sum\")\n)\ncolor_time[\"rank_pct\"] = color_time[\"n_games\"] / color_time[\"n_games_sum\"]\n\ncolor_time_mean = (\n    color_time[[\"draft_time\", \"n_wins\", \"n_games\"]]\n    .groupby(\"draft_time\")\n    .sum()\n    .reset_index()\n)\ncolor_time_mean[\"win_rate\"] = color_time_mean[\"n_wins\"] / color_time_mean[\"n_games\"]\n\n\ncolor_decks = [\"UB\", \"WU\", \"UG\", \"UR\"]\ncolor_time = color_time.loc[color_time[\"main_colors\"].isin(color_decks)]\n\nmask = color_time[\"draft_time\"] == pd.to_datetime(\"2024-08-08\")\nlabels = color_time.loc[mask].sort_values(\"rank_pct\", ascending=False)\n\nplt.figure(figsize=(8, 5))\nsns.lineplot(\n    data=color_time,\n    x=\"draft_time\",\n    y=\"rank_pct\",\n    hue=\"main_colors\",\n    hue_order=color_decks,\n    legend=True,\n)\n\nplt.axvline(\n    x=pd.to_datetime(\"2024-07-30\"), color=\"orange\", linestyle=\"--\", label=\"BLB Release\"\n)\nfor i, row in labels.iterrows():\n    plt.text(\n        row[\"draft_time\"] + timedelta(days=i % 2),\n        row[\"rank_pct\"] + 0.001,\n        str(row[\"main_colors\"]),\n        fontsize=10,\n        alpha=0.7,\n        ha=\"center\",\n    )\nplt.xticks(rotation=90)\nplt.title(\"Drafts Played by 2-Color Deck over Time\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"Drafts Played\")\nplt.legend(loc=\"center right\")\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nColor Win Rates\nIn addition to the use rate of the colors, I will also look at the win rates of the colors. First I calculate the weighted average win rate of 54.7%. As we saw in the summary section, this indicates that the 17Lands player base has a higher win rate than the general draft player base.\nBelow is a chart of the win rate for each color combination. There are some mono-color decks with high win rates, but have very low use rates, so the results may be circumstantial with a small sample size.\n\n\nCode\nmean_win_rate = df_summary.collect().to_pandas()['win_rate'].values[0]\nprint(f\"Average Win Percentage: {mean_win_rate:0.2%}\")\n\n\nAverage Win Percentage: 54.71%\n\n\n\n\nCode\ncolor_wins = (\n    df_draft.group_by(\"main_colors\")\n    .agg(\n        pl.col(\"n_games\").sum(), \n        pl.col(\"n_wins\").sum(),\n        pl.col(\"n_losses\").sum(),\n\n    )\n    .sort(by=\"n_games\", descending=True)\n    .collect()\n)\ncolor_wins = color_wins.to_pandas()\ncolor_wins[\"win_rate\"] = color_wins[\"n_wins\"] / color_wins[\"n_games\"]\ncolor_wins[\"loss_rate\"] = color_wins[\"n_losses\"] / color_wins[\"n_games\"]\ncolor_wins = color_wins.sort_values(\"win_rate\", ascending=False).reset_index(drop=True)\n\nn = 50\nplt.axvline(mean_win_rate, color=\"gray\", linestyle=\"--\", linewidth=2, alpha=0.5)\ng = sns.barplot(data=color_wins.head(n), x=\"win_rate\", y=\"main_colors\")\ng.set(xlim=(0.20, 0.63))\nfor index, row in color_wins.head(n).iterrows():\n    plt.text(row[\"win_rate\"] + 0.001, index, f\"{row['win_rate']:.1%}\", va=\"center\")\nplt.title(\"Win Rate by Draft Deck Colors\")\nplt.xlabel(r\"Win Rate ($\\mu_{\\text{weighted}}$\" + f\"={mean_win_rate:0.3f})\")\nplt.ylabel(\"Draft Color Combinations\")\nplt.show()\n\n\n\n\n\n\n\n\n\nFocusing on the 2-color decks, the Black-Red Lizards: Opponents Lose Life is the highest win rate, but with a fairly low use rate. The White-Red Rabbits: Go-Wide and Black-Green Squirrels: Forage are the most popular decks and have high win rates.\n\n\nCode\ncolor_mask = color_wins[\"main_colors\"].isin(colors.head(10)['main_colors'])\ntwo_color_wins = color_wins.loc[color_mask].sort_values(\"win_rate\", ascending=False).reset_index(drop=True)\n\nplt.axvline(mean_win_rate, color=\"gray\", linestyle=\"--\", linewidth=2, alpha=0.5)\ng = sns.barplot(data=two_color_wins, x=\"win_rate\", y=\"main_colors\")\ng.set(xlim=(0.48, 0.58))\nfor index, row in two_color_wins.iterrows():\n    plt.text(row[\"win_rate\"] + 0.001, index, f\"{row['win_rate']:.1%}\", va=\"center\")\nplt.title(\"Win Rate of 2-Color Draft Decks\")\nplt.xlabel(r\"Win Rate ($\\mu_{\\text{weighted}}$\" + f\"={mean_win_rate:0.3f})\")\nplt.ylabel(\"Draft Two-Color Combinations\")\nplt.show()\n\n\n\n\n\n\n\n\n\nHere is the win rates for the five primary colors, based on if they are a main color in a deck. For example, the “B” results below are for Black win rates in decks suck as WB, BG, B, and UBR.\nThe average win rate for the data is 54.7%. The decks with Black perform the best, with a 55.2% win rate. Decks with Green and White also perform well, with 55.0% and 54.8% respectively. The decks with Red and Blue under-perform, with 53.8% and 53.2% win rate each.\n\n\nCode\nfor color in [\"W\", \"U\", \"B\", \"R\", \"G\"]:\n    color_wins[color] = color_wins[\"main_colors\"].apply(\n        lambda x: True if color in x else False\n    )\n\ndfs = []\n\nfor color in [\"W\", \"U\", \"B\", \"R\", \"G\"]:\n    agg = color_wins.groupby(color).sum()\n    agg[\"win_rate\"] = agg[\"n_wins\"] / agg[\"n_games\"]\n    dfs.append(pd.DataFrame({\"component_color\": color, \"win_rate\": agg.loc[True, \"win_rate\"]}, index=[0]))\n\ndf = pd.concat(dfs)\ndf = df.sort_values(\"win_rate\", ascending=False).reset_index(drop=True)\n\nplt.axvline(mean_win_rate, color=\"gray\", linestyle=\"--\", linewidth=2, alpha=0.5)\ng = sns.barplot(data=df, x=\"win_rate\", y=\"component_color\")\ng.set(xlim=(0.52, 0.56))\nfor index, row in df.iterrows():\n    plt.text(row[\"win_rate\"] + 0.001, index, f\"{row['win_rate']:.1%}\", va=\"center\")\nplt.title(\"Component Colors Win Rate\")\nplt.xlabel(r\"Win Rate ($\\mu_{\\text{weighted}}$\" + f\"={mean_win_rate:0.3f})\")\nplt.ylabel(\"Component Colors of Drafts\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\ncolor_time = (\n    (\n        df_draft.filter(\n            pl.col(\"main_colors\").str.len_chars() == 2,\n        )\n        .group_by(pl.col(\"draft_time\").dt.truncate(\"7d\"), pl.col(\"main_colors\"))\n        .agg(\n            pl.col(\"n_games\").sum(),\n            pl.col(\"n_wins\").sum(),\n        )\n        .sort(by=[\"draft_time\", \"n_games\"], descending=[False, True])\n    )\n    .with_columns(pl.col(\"draft_time\") + timedelta(days=5))\n    .collect()\n    .to_pandas()\n)\n\ncolor_time[\"win_rate\"] = color_time[\"n_wins\"] / color_time[\"n_games\"]\n\ncolor_time_mean = (\n    color_time[[\"draft_time\", \"n_wins\", \"n_games\"]]\n    .groupby(\"draft_time\")\n    .sum()\n    .reset_index()\n)\ncolor_time_mean[\"win_rate\"] = color_time_mean[\"n_wins\"] / color_time_mean[\"n_games\"]\n\n\ncolor_decks = [\"UB\", \"WU\", \"UG\", \"UR\"]\ncolor_time = color_time.loc[color_time[\"main_colors\"].isin(color_decks)]\n\nmask = color_time[\"draft_time\"] == pd.to_datetime(\"2024-08-20\")\nlabels = color_time.loc[mask].sort_values(\"win_rate\", ascending=False)\n\n\nplt.figure(figsize=(8, 5))\nsns.lineplot(\n    data=color_time,\n    x=\"draft_time\",\n    y=\"win_rate\",\n    hue=\"main_colors\",\n    hue_order=color_decks,\n    legend=True,\n)\n\nplt.axvline(\n    x=pd.to_datetime(\"2024-07-30\"), color=\"orange\", linestyle=\"--\", label=\"BLB Release\"\n)\nfor i, row in labels.iterrows():\n    plt.text(\n        row[\"draft_time\"] + timedelta(days=(i % 2)-1),\n        row[\"win_rate\"] + 0.0015,\n        str(row[\"main_colors\"]),\n        fontsize=10,\n        alpha=0.7,\n        ha=\"center\",\n    )\n\nplt.plot(\n    color_time_mean[\"draft_time\"],\n    color_time_mean[\"win_rate\"],\n    color=\"black\",\n    linestyle=\"--\",\n    label=\"Mean Daily Win Rate\",\n)\nplt.xticks(rotation=90)\nplt.title(\"Win Rate by 2-Color Deck over Time\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"Win Rate\")\nplt.legend(loc=\"lower center\")\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nColor Freq vs Win Rate\nLet us now compare the use rate versus the win rate. If the player base is well calibrated to the win rate with their selections.\nBelow we can see that most of the two-color decks fall in a straight line, with two outliers. The Blue-Red Otters: Non-creature Spells deck under-performs relative to its use rate. On the other hand, the Black-Red Lizards: Opponents Lose Life deck is a sleeper, with the highest win rates, but selected less than the average two-color deck. The reason for this under-selection is that Red doesn’t perform well in general, so many drafters probably avoid drafting Red unless they get strong Black-Red cards early. White, Green, and Black are perform well, so the BG, WG, and WB decks are easy to pivot among in the draft.\n\n\nCode\npaired_df = color_wins[[\"main_colors\", \"win_rate\", \"loss_rate\"]]\ncolors[\"use_rate\"] = colors[\"len\"] / colors[\"len\"].sum()\nselect_colors = colors[[\"main_colors\", \"use_rate\"]]\npaired_df = paired_df.merge(select_colors, on=\"main_colors\")\n\npaired_filered_df = paired_df.loc[color_mask].reset_index(drop=True)\n\nsns.regplot(\n    data=paired_filered_df,\n    x=\"use_rate\",\n    y=\"win_rate\",\n    scatter=True,\n    ci=None,\n    line_kws={\"color\": \"red\", \"linewidth\": 1, \"alpha\": 0.8},\n)\n\nfor i, row in paired_filered_df.iterrows():\n    plt.text(\n        row[\"use_rate\"],\n        row[\"win_rate\"]+0.001,\n        str(row[\"main_colors\"]),\n        fontsize=10,\n        ha=\"center\",\n    )\n\nuse_rate_mu = paired_filered_df[\"use_rate\"].mean()\nwin_rate_mu = paired_filered_df[\"win_rate\"].mean()\n\nplt.axvline(use_rate_mu, color=\"gray\", linestyle=\"--\", linewidth=1, alpha=0.5)\nplt.axhline(win_rate_mu, color=\"gray\", linestyle=\"--\", linewidth=1, alpha=0.5)\nplt.title(\"Win Rate vs Use Rate of 2-Color Draft Decks\")\nplt.xlabel(f\"Use Rate (μ={use_rate_mu:0.3f})\")\nplt.ylabel(r\"Win Rate ($\\mu_{\\text{weighted}}$\" + f\"={mean_win_rate:0.3f})\")\nplt.show()"
  },
  {
    "objectID": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#opposing-player-colors",
    "href": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#opposing-player-colors",
    "title": "Quarto Basics",
    "section": "Opposing Player Colors",
    "text": "Opposing Player Colors\nWe have data on the opposing player colors. This is useful to understand the meta of the draft.\nFor a given draft color combination, we can see the use rate by 17Lands players versus the use rate opponents. Each draft color combination is also color coded if the win rate is above or below the 17Lands player base average win rate. A diagonal grey line is also added to show parity between the use by the 17Lands players and the general player base.\nIn the chart blow looks at 2-color drafts. We can see that WG, BG, and UG are more favored by the 17Lands players and also has a higher win rate. The UB color deck is more favored, but has a much lower win rate. The other color pairs are on parity between the two player bases.\n\n\nCode\nopp_colors = df_draft.group_by(\"opp_colors\").len().sort(by='len', descending=True).collect().to_pandas()\n\nopp_colors['opp_use_rate'] = opp_colors['len'] / opp_colors['len'].sum()\nopp_colors = opp_colors.rename(columns=({\"len\": \"opp_len\"}))\nopp_colors = opp_colors.merge(paired_df, left_on=\"opp_colors\", right_on=\"main_colors\", how=\"left\")\nopp_colors['Above Avg Win Rate'] = opp_colors['win_rate'] &gt; mean_win_rate\n\nplt.figure(figsize=(6, 6))\n\nmask = opp_colors['main_colors'].str.len() == 2\nopp_colors_filtered = opp_colors.loc[mask]\n\nsns.scatterplot(\n    data=opp_colors_filtered,\n    x=\"use_rate\",\n    y=\"opp_use_rate\",\n    hue=\"Above Avg Win Rate\"\n)\n\nplt.plot([0.03, 0.16], [0.03, 0.16], color=\"gray\", linestyle=\"--\", linewidth=1, alpha=0.5)\n\nfor i, row in opp_colors_filtered.iterrows():\n    plt.text(\n        row[\"use_rate\"],\n        row[\"opp_use_rate\"]+0.002,\n        str(row[\"opp_colors\"]),\n        fontsize=10,\n        alpha=0.8,\n        ha=\"center\",\n    )\n\nuse_rate_mu = opp_colors_filtered['use_rate'].mean()\nopp_use_rate_mu = opp_colors_filtered['opp_use_rate'].mean()\n\nplt.title(\"Use Rate of Players vs Opponents in 2-Color Draft Decks\")\nplt.xlabel(f\"Player Use Rate (μ={use_rate_mu:0.3f})\")\nplt.ylabel(f\"Opponent Use Rate (μ={opp_use_rate_mu:0.3f})\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nLooking at the non-2-color drafts, we see that the 17Lands players are much less likely to pick any color companion that is not a 2-color deck. The win rates are also lower for these decks, which some exceptions being the White, Green, and Black decks.\nBased on this, it appears that if a drafter is selecting mono White, Green, or Black, they are better staying mono than drafting a 2-color deck into Blue or Red. However, since the mono decks are so infrequent, the strong deck performance may be circumstantial to certain cards combinations and not generalize across the entire color set.\n\n\nCode\nmask = opp_colors['main_colors'].str.len() != 2\nmask &= opp_colors['use_rate'] &gt; 0.001\nopp_colors_filtered = opp_colors.loc[mask]\n\nplt.figure(figsize=(6, 6))\nsns.scatterplot(\n    data=opp_colors_filtered,\n    x=\"use_rate\",\n    y=\"opp_use_rate\",\n    hue=\"Above Avg Win Rate\"\n)\n\nplt.plot([0.0, 0.025], [0.0, 0.025], color=\"gray\", linestyle=\"--\", linewidth=1, alpha=0.5)\n\nfor i, row in opp_colors_filtered.iterrows():\n    plt.text(\n        row[\"use_rate\"],\n        row[\"opp_use_rate\"]+0.0005,\n        str(row[\"opp_colors\"]),\n        fontsize=10,\n        alpha=0.7,\n        ha=\"center\",\n    )\n\nuse_rate_mu = opp_colors_filtered['use_rate'].mean()\nopp_use_rate_mu = opp_colors_filtered['opp_use_rate'].mean()\n\nplt.title(\"Use Rate of Players vs Opponents in Non-2-Color Draft Decks\")\nplt.xlabel(f\"Player Use Rate (μ={use_rate_mu:0.3f})\")\nplt.ylabel(f\"Opponent Use Rate (μ={opp_use_rate_mu:0.3f})\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nMatrix 2-Color vs 2-Color\nLet’s now see how each pairing of the two-color decks compare. This will give us insight into strengths and weaknesses of individual decks.\nFirst we will look at the number of games played between each pairing. The rows and columns are sorted based on the maximum frequency of player deck pairings, with BG vs WG the most frequent, followed by WG vs WG. The average number of games played between each pairing was 5,031.\nAs we saw above, the players use BG, WG, and UG more often than opponents, with the other color pairs being used at near parity.\n\n\nCode\ndual_colors = (\n    df_draft.filter(\n        pl.col(\"opp_colors\").str.len_chars() == 2,\n        pl.col(\"main_colors\").str.len_chars() == 2,\n        # pl.col(\"rank\") == 'mythic',\n    )\n    .group_by([\"opp_colors\", \"main_colors\"])\n    .agg(\n        pl.col(\"n_games\").sum(),\n        pl.col(\"n_wins\").sum(),\n        pl.col(\"n_losses\").sum(),\n    )\n    .sort(by=\"n_games\", descending=True)\n    .collect()\n)\ndual_colors = dual_colors.to_pandas()\ndual_colors[\"win_rate\"] = dual_colors[\"n_wins\"] / dual_colors[\"n_games\"]\ndual_colors[\"loss_rate\"] = dual_colors[\"n_losses\"] / dual_colors[\"n_games\"]\ndual_colors = dual_colors.sort_values(\"win_rate\", ascending=False).reset_index(\n    drop=True\n)\n\ndual_matrix = dual_colors.pivot(\n    index=\"main_colors\", columns=\"opp_colors\", values=\"n_games\"\n)\n\nmeans = dual_matrix.max(axis=1).sort_values(ascending=False)\ndual_matrix = dual_matrix.loc[means.index, means.index]\npair_mean = dual_matrix.mean().mean()\n\nplt.figure(figsize=(6, 6))\nsns.heatmap(\n    dual_matrix,\n    annot=True,\n    fmt=\",.0f\",\n    cmap=\"coolwarm\",\n    cbar=False,\n    annot_kws={\"fontsize\": 8},\n)\nplt.title(\n    \"Games Played of 2-Color Draft Decks vs Opponent 2-Color Draft Decks\\n(μ=\"\n    + f\"{pair_mean:,.0f})\"\n)\nplt.xlabel(\"Opponent Deck Colors\")\nplt.ylabel(\"Player Deck Colors\")\nplt.show()\n\n\n\n\n\n\n\n\n\nNext we look at the pair-wise win rates for players.\nThe most interesting observation is that the 17Lands player base is strong in most matchups, with a large exception for the UR deck. On average, the UR matchups under-perform by ~4 percentage points versus similar matchups. The UR-UR matchup is extremely low, and is the only like-paired matchup that has lower than even odds of winning.\n\n\nCode\ndual_matrix = dual_colors.pivot(\n    index=\"main_colors\", columns=\"opp_colors\", values=\"win_rate\"\n)\n\ndual_matrix = dual_matrix.loc[means.index, means.index]\n\npair_mean = dual_matrix.mean().mean()\n\nplt.figure(figsize=(6, 6))\nsns.heatmap(\n    dual_matrix,\n    annot=True,\n    fmt=\".1%\",\n    cmap=\"coolwarm\",\n    cbar=False,\n    annot_kws={\"fontsize\": 8},\n)\nplt.title(\"Win Rate of 2-Color Draft Decks vs Opponent 2-Color Draft Decks\\n(μ=\" + f\"{pair_mean:0.1%})\")\nplt.xlabel(\"Opponent Deck Colors\")\nplt.ylabel(\"Player Deck Colors\")\nplt.show()"
  },
  {
    "objectID": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#player-rank",
    "href": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#player-rank",
    "title": "Quarto Basics",
    "section": "Player Rank",
    "text": "Player Rank\nTo get a sense of player skill, below I plotted the number of wins by the player rank. I do not have player IDs, so I cannot track individual player performance. However, we can see the average performance of the player base. I also cannot track the number of drafts per player, so more frequent players will be over-represented.\nWhile we do not have opponent rankings, we can infer that most opponents will be of the same rank as the player. This is because the Arena draft system matches players with similar records. Each ranked season is about 1 month long. Ranks have “rank decay” between seasons, meaning an the start of the next season, a players rank will be lower than the previous season, requiring them to play more games to get back to their previous rank.\nSo our snapshot of each rank is a mix of lower-skill, end-of-season players at their peak, and higher-skill, start-of-season players who are climbing back up the ranks.\nBelow we see that most drafts are played by players in the Platinum ranks.\n\n\nCode\ndraft_rank = df_draft.group_by(\"rank\").agg(\n    pl.col(\"n_wins\").len().alias('len'), \n    pl.col(\"n_wins\").sum(), \n    pl.col(\"n_games\").sum()\n).sort(by='n_wins', descending=True)\n\n\n\n\nCode\nordered_ranks = {\n    0: \"bronze\",\n    1: \"silver\",\n    2: \"gold\",\n    3: \"platinum\",\n    4: \"diamond\",\n    5: \"mythic\",\n}\n\nordered_ranks_df = pl.LazyFrame(\n    {\"rank_value\": list(ordered_ranks.keys()), \"rank\": list(ordered_ranks.values())}\n).with_columns(\n    # Create the rank_name column\n    (pl.col(\"rank_value\").cast(str) + \" \" + pl.col(\"rank\").str.to_uppercase()).alias(\n        \"rank_name\"\n    )\n)\n\n\n\n\nCode\nranks = (\n    ordered_ranks_df.join(draft_rank, on=\"rank\", how=\"left\")\n    .sort(\"rank_value\")\n    .collect()  # Execute the lazy frame\n).to_pandas()\n\nsns.barplot(data=ranks, y=\"rank_name\", x=\"len\")\n\nplt.title(\"Drafts Played by Players of Different Ranks\")\nplt.xlabel(\"Drafts Played\")\nplt.ylabel(\"Player Rank\")\nplt.show()\n\n\n\n\n\n\n\n\n\nHere we see that the win rates vary by rank. The higher ranks have higher win rates. Bronze has by far the lowest win rate, indicating new or unskilled players. The Silver rank has the highest win rate. This may be from the large number of Gold and Platinum players that reset to Silver at the start of the season and quickly climb back up the ranks.\n\n\nCode\nranks['win_rate'] = ranks['n_wins'] / ranks['n_games']\n\nplt.axvline(mean_win_rate, color=\"gray\", linestyle=\"--\", linewidth=2, alpha=0.5)\nsns.barplot(data=ranks, y='rank_name', x='win_rate')\nplt.xlim(0.5, 0.60)\n\nplt.title(\"Win Rate by Players of Different Ranks\")\nplt.xlabel(r\"Win Rate ($\\mu_{\\text{weighted}}$\" + f\"={mean_win_rate:0.3f})\")\nplt.ylabel(\"Player Rank\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\ndraft_rank = (\n    df_draft.with_columns(\n        (pl.col(\"draft_time\") &gt; pd.to_datetime(\"2024-08-13\")).alias(\"last_week\")\n    )\n    .group_by([\"rank\", \"last_week\"])\n    .agg(\n        pl.col(\"n_wins\").len().alias(\"len\"),\n        pl.col(\"n_wins\").sum(),\n        pl.col(\"n_games\").sum(),\n    )\n    .sort(by=\"n_wins\", descending=True)\n)\n\n\nweek_ranks = (\n    ordered_ranks_df.join(draft_rank, on=\"rank\", how=\"left\")\n    .sort(\"rank_value\")\n    .collect()  # Execute the lazy frame\n).to_pandas()\n\nweek_ranks[\"win_rate\"] = week_ranks[\"n_wins\"] / week_ranks[\"n_games\"]\n\nplt.axvline(mean_win_rate, color=\"gray\", linestyle=\"--\", linewidth=2, alpha=0.5)\nsns.barplot(data=week_ranks, y=\"rank_name\", x=\"win_rate\", hue=\"last_week\")\nplt.xlim(0.5, 0.60)\n\nplt.title(\"Win Rate by Players of Different Ranks by Timeframe\")\nplt.xlabel(r\"Win Rate ($\\mu_{\\text{weighted}}$\" + f\"={mean_win_rate:0.3f})\")\nplt.ylabel(\"Player Rank\")\nplt.show()\n\n\n\n\n\n\n\n\n\nBelow is a view for the number of games played per draft for each rank. While not identical, the pattern is very similar to the above chart of win rate.\n\n\nCode\nranks[\"games_per_draft\"] = ranks[\"n_games\"] / ranks[\"len\"]\nmean_games_played = df_draft.select(pl.col(\"n_games\").mean()).collect().to_numpy()[0][0]\n\nplt.axvline(mean_games_played, color=\"gray\", linestyle=\"--\", linewidth=2, alpha=0.5)\nsns.barplot(data=ranks, y=\"rank_name\", x=\"games_per_draft\")\nplt.xlim(5, 6)\n\nplt.title(\"Games Played per Draft by Players of Different Ranks\")\nplt.xlabel(r\"Games per Draft ($\\mu_{\\text{weighted}}$\" + f\"={mean_games_played:0.3f})\")\nplt.ylabel(\"Player Rank\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nRanks over Time\nWe next look at the number of drafts played for each rank over the dataset. Since the BLB set was released two days before the season start, I have truncated the data at 08-01 to avoid the rank decay.\nThe first few days are chaotic, as the BLB set released on 07-30, but with 07-31 being the first full day with games recorded. 08-01 was when the next ranked season started, resulting in rank decay, which is especially pronounced in Mythic and Diamond gameplay.\nAn interesting pattern is seen starting on 08-01, with Gold quickly decaying after the initial peak of 3800 drafts per day. The Platinum rank having a quick peak during days 4-6, then dropping.\nThe Diamond rank has a slow climb with a plateau during days 8-13 and then slowly retracing.\nThe Mythic rank starts at zero, then very slowly climbs te a peak of 500 drafts per day peak at 13-16 days.\nFrom this chart, we can’t tell how much of the decline at each ranks is due to player advancement, and how much is loss of interest after the initial excitement of a new season. In the following charts, I will normalize to the total drafts played to better account for overall decrease in gameplay.\n\n\nCode\nrank_time_df = (\n    df_draft.group_by(\n        pl.col(\"draft_time\").dt.truncate(\"1d\")  # Truncate datetime to day\n    )\n    .agg(\n        [\n            pl.col(\"rank\")\n            .value_counts()\n            .alias(\"rank_counts\")  # Count occurrences of each rank\n        ]\n    )\n    .explode(\"rank_counts\")\n    .with_columns(\n        # Extract rank and count from the exploded struct\n        pl.col(\"rank_counts\").struct.field(\"rank\").alias(\"rank\"),\n        pl.col(\"rank_counts\").struct.field(\"count\").alias(\"count\"),\n    )\n    .drop(\"rank_counts\")\n    .join(ordered_ranks_df, on=\"rank\", how=\"left\")\n    .sort(by=[\"draft_time\", \"rank_name\"], descending=False)\n    .collect()\n    .to_pandas()\n)\n\n\n\n\nCode\nprint(f\"Total Time Interval: {(rank_time_df[\"draft_time\"].max() - rank_time_df[\"draft_time\"].min())}\")\n\n\nTotal Time Interval: 19 days 00:00:00\n\n\n\n\nCode\nplt.figure(figsize=(8, 5))\nsns.lineplot(data=rank_time_df, x=\"draft_time\", y=\"count\", hue=\"rank_name\")\nplt.xlim(pd.to_datetime(\"2024-07-29\"), rank_time_df[\"draft_time\"].max())\n\nplt.axvline(\n    x=pd.to_datetime(\"2024-08-01\"), color=\"red\", linestyle=\"--\", label=\"Start of Season\"\n)\nplt.axvline(\n    x=pd.to_datetime(\"2024-07-30\"), color=\"orange\", linestyle=\"--\", label=\"BLB Release\"\n)\nplt.xticks(rotation=90)\nplt.title(\"Drafts Played by Players of Different Ranks Over Time\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"Drafts Played\")\nplt.legend()\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nHere we can see the numbers of drafts played. It is interesting that since both the release of BLB and the start of the new season coincided, the player interest in draft was very high with a peak of 11,300 drafts played on 07-31. The rate of play decayed over the weeks, with the minimum recorded of 3,100 occurring on 08-17.\nThe decline is nearly monotonic, with slight upticks occurring on the Saturdays of 08-04 and 08-11. This shows that the weekly seasonality is of minor effect.\nIt is interesting how releasing new sets increases player engagement. The introduction of the new season on 08-01 doesn’t seem to have caused an uptick in play, but this is a weak inference.\nFrom this data, I understand the economic motivation for releasing new sets for digital engagement on Arena. One could infer that paper play would follow a similar pattern, with draft play consuming many more booster packs a few weeks after a launch of a new set.\nIt would be interesting to compare this curve across set releases to get an indication of set-by-set preferences of the player base.\n\n\nCode\nrank_time_sum = (\n    rank_time_df[[\"draft_time\", \"count\"]].groupby([\"draft_time\"]).sum().reset_index()\n)\nplt.figure(figsize=(8, 5))\nsns.lineplot(data=rank_time_sum, x=\"draft_time\", y=\"count\", label=\"Total Drafts Played\")\nplt.xlim(pd.to_datetime(\"2024-07-29\"), rank_time_sum[\"draft_time\"].max())\nplt.ylim(0, 12000)\nplt.axvline(\n    x=pd.to_datetime(\"2024-08-01\"), color=\"red\", linestyle=\"--\", label=\"Start of Season\"\n)\nplt.axvline(\n    x=pd.to_datetime(\"2024-07-30\"), color=\"orange\", linestyle=\"--\", label=\"BLB Release\"\n)\n\nplt.xticks(rotation=90)\nplt.title((\"Total Drafts Played by Players Over Time\\n\"\n           \"(max=\" + f\"{rank_time_sum['count'].max():,.0f}, \"\n           \"min=\" + f\"{rank_time_sum['count'].min():,.0f})\"))\nplt.xlabel(\"Day\")\nplt.ylabel(\"Drafts Played\")\nplt.legend()\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nNext we normalize for the total games played to see relative ranked play across the player base.\nWe can now see the relative rank play much more clearly.\nAfter the new season start, Gold shows a linear decay as the player base advances to Platinum.\nThe Platinum has a much more prolonged plateau, showing an equilibrium of new players joining the rank versus existing players advancing.\nBoth Diamond and Mythic start with minimal players, but gradually increase in play nearly monotonically at differing rates.\n\n\nCode\nrank_time_df2 = rank_time_df.merge(rank_time_sum, on=\"draft_time\", suffixes=(\"\", \"_sum\"))\nrank_time_df2[\"rank_pct\"] = rank_time_df2[\"count\"] / rank_time_df2[\"count_sum\"]\n\nplt.figure(figsize=(8, 5))\nsns.lineplot(data=rank_time_df2, x=\"draft_time\", y=\"rank_pct\", hue=\"rank_name\")\nplt.xlim(pd.to_datetime(\"2024-07-29\"), rank_time_sum[\"draft_time\"].max())\n\nplt.axvline(\n    x=pd.to_datetime(\"2024-08-01\"), color=\"red\", linestyle=\"--\", label=\"Start of Season\"\n)\nplt.axvline(\n    x=pd.to_datetime(\"2024-07-30\"), color=\"orange\", linestyle=\"--\", label=\"BLB Release\"\n)\n\nplt.xticks(rotation=90)\nplt.title(\"Drafts Played by Players of Different Ranks Over Time\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"Drafts Played\")\nplt.legend()\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nLow vs High Rank Players\nNow let’s compare the performance of player rank versus success. I will take the 3 two-color decks that were outliers in the previous use-rate versus win-rate chart. I’ll use the BG deck with a high use and win rate, the BR deck with a high win rate and lower use rate, and the UR deck, with the very low use rate and an extremely low win rate.\nBelow we can see the overall performance of players with these decks. We have two categories. The first is the week of play and the second is the if the player is in the elite ranks of Diamond or Mythic.\nFor BG, the most played deck, the performance across weeks and ranks shows no clear trend.\nHowever, the BR and UR decks, which are less played, both sets of ranked players showed noticeable gains in win rate from week one to two. This indicates that the 17Lands player base learned how to better use these less favorable decks, regardless of rank.\nNote that for the first week of play, the Mythic and Diamond play base is very small.\n\n\nCode\n{\n    \"tags\": [\"hide-input\"]\n}\ndraft_rank_deck = (\n    df_draft.with_columns(\n        (\n            (\n                (pl.col(\"draft_time\") - pd.to_datetime(\"2024-07-30\"))\n                / pd.Timedelta(days=7)\n            ).cast(pl.Int64)\n        ).alias(\"week\"),\n        (pl.col(\"rank\").is_in([\"mythic\", \"diamond\"])).alias(\"elite_ranks\"),\n    )\n    .filter(\n        pl.col(\"main_colors\").is_in([\"BG\", \"BR\", \"UR\"]),\n    )\n    .group_by([\"rank\", \"main_colors\", \"week\"])\n    .agg(\n        pl.col(\"n_wins\").len().alias(\"len\"),\n        pl.col(\"n_wins\").sum(),\n        pl.col(\"n_games\").sum(),\n        pl.col(\"elite_ranks\").first(),\n    )\n    .sort(by=\"n_wins\", descending=True)\n)\n\nranks_deck = (\n    ordered_ranks_df.join(draft_rank_deck, on=\"rank\", how=\"left\")\n    .sort(\"rank_value\")\n    .collect()  # Execute the lazy frame\n).to_pandas()\nranks_deck[\"win_rate\"] = ranks_deck[\"n_wins\"] / ranks_deck[\"n_games\"]\n\nranks_deck = ranks_deck.rename(\n    columns={\n        \"elite_ranks\": \"Rank of Mythic or Diamond\",\n        \"week\": \"Week of Play\",\n        \"main_colors\": \"Player Deck Colors\",\n        \"win_rate\": \"Player Win Rate\",\n    }\n)\n\nsns.catplot(\n    data=ranks_deck,\n    x=\"Week of Play\",\n    y=\"Player Win Rate\",\n    hue=\"Rank of Mythic or Diamond\",\n    kind=\"point\",\n    col=\"Player Deck Colors\",\n    height=4,\n    aspect=0.8,\n    legend_out=False\n)\nplt.suptitle(\"Drafts Played by Players of Different Ranks\")\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#mulligans",
    "href": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#mulligans",
    "title": "Quarto Basics",
    "section": "Mulligans",
    "text": "Mulligans"
  },
  {
    "objectID": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#turn-conuts",
    "href": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#turn-conuts",
    "title": "Quarto Basics",
    "section": "Turn Conuts",
    "text": "Turn Conuts"
  },
  {
    "objectID": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#builds",
    "href": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#builds",
    "title": "Quarto Basics",
    "section": "Builds",
    "text": "Builds"
  },
  {
    "objectID": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#starting-player",
    "href": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#starting-player",
    "title": "Quarto Basics",
    "section": "Starting Player",
    "text": "Starting Player\n\n\nCode\n## Start\n\n\n\n\nCode\n## \n\n\n\n\nCode\n## Turn\n\n\n\n\nCode\n## Tu"
  }
]