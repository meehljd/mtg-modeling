[
  {
    "objectID": "notebooks/02-draft-data/02-20-draft-data-wrangle.html",
    "href": "notebooks/02-draft-data/02-20-draft-data-wrangle.html",
    "title": "Summary",
    "section": "",
    "text": "The code to wrangle the data. Deal with NAs, join data frames, etc."
  },
  {
    "objectID": "notebooks/02-draft-data/02-20-draft-data-wrangle.html#terms",
    "href": "notebooks/02-draft-data/02-20-draft-data-wrangle.html#terms",
    "title": "Summary",
    "section": "Terms",
    "text": "Terms\nThe following terms are used in the data set: - game: a single game of MTG - match: a series of games between two players. Typically best of 1 or best of 3. - draft: an initial draft event, followed by a series of matches between a group of players. - build: a instance of a deck in a draft. Can be adjusted between games."
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-21-booster-data-wrangle.html",
    "href": "notebooks/01-mtgjson-data/01-21-booster-data-wrangle.html",
    "title": "Summary",
    "section": "",
    "text": "Wrangle the booster set data.\n\nIntroduction\nThis notebook will wrangle the data needed to understand booster pack composition.\nThis data is sourced by MTGJSON from https://github.com/taw/magic-sealed-data. See the intro notebook 00-10-introduction.ipynb\nI made a dataset for simulating booster packs. This will look at for each combination of booster pack config, sheet name, and card name. The three rates that affect expected pull rates are: - Booster Pack Config: Unique mixes of booster packs, such as some having “The List” cards or land foils. - Sheet Picks: Number of picks from each sheet type in the booster config, such as some packs having 6 picks from the commons sheets, while others get 5 picks. - Card Sheet Rate: The rate at which a card uuid occurs on the sheet. These rates are then used to create an expected pull rate. I break this into two expected pull rate. One is per uuid, which has different values for alternate cards. The other is per name, which lumps all card alternates with the same gameplay mechanics together.\nI took the above dataset and collapse it to the expected pull rates for each card and uuid, aggregating the pack configurations and sheet names. This can be added to other card stats.\n\n\nInitial Load and Transforms\n\n# Setup Notebook\nimport os\nif os.path.basename(os.getcwd()) != \"mtg-modeling\":\n    get_ipython().run_line_magic(\"run\", '-i \"../../scripts/notebook_header.py\"')  # type: ignore\n\n\nimport pandas as pd\nimport polars as pl\n\nSet paths. Using the OUTLAWS OF THUNDER JUNCTION set code and play booster type.\n\nSET_CODE = \"BLB\" # OUTLAWS OF THUNDER JUNCTION\nBOOSTER_NAME = \"play\" # play boosters\n\npaths = {\n    \"raw\": Path(\"data/raw/mtgjson/AllPrintingsParquetFiles\"),\n    \"interim\": Path(\"data/interim/mtgjson/Boosters\"),\n    \"processed\": Path(\"data/processed/mtgjson/Boosters\"),\n}\n\npaths['raw'].exists()\nos.makedirs(paths[\"interim\"], exist_ok=True)\nos.makedirs(paths[\"processed\"], exist_ok=True)\n\nScan files into lazy dataframes. No compute until .collect() method is called.\n\ncards = pl.scan_parquet(\n    Path(f\"data/processed/mtgjson/AllPrintings/{SET_CODE}_std_cards.parquet\")\n)\nboost_content = pl.scan_parquet(paths[\"raw\"] / \"setBoosterContents.parquet\")\nboost_weight = pl.scan_parquet(paths[\"raw\"] / \"setBoosterContentWeights.parquet\")\nboost_sheets = pl.scan_parquet(paths[\"raw\"] / \"setBoosterSheets.parquet\")\nboost_cards = pl.scan_parquet(paths[\"raw\"] / \"setBoosterSheetCards.parquet\")\n\nTidy the card data.\n\ndf_cards = (\n    cards.select([\"name\", \"setCode\", \"number\", \"uuid\"])\n    .filter(pl.col(\"setCode\") == SET_CODE)\n    .join(boost_cards, left_on=\"uuid\", right_on=\"cardUuid\", how=\"inner\")\n    .with_columns(\n        [\n            pl.col(\"number\")\n            .str.zfill(3)\n            .alias(\"number\")\n        ]\n    )\n)\ndf_cards.collect().head()\n\n\nshape: (5, 8)\n\n\n\nname\nsetCode\nnumber\nuuid\nboosterName\ncardWeight\nsetCode_right\nsheetName\n\n\nstr\nstr\nstr\nstr\nstr\ni64\nstr\nstr\n\n\n\n\n\"Raccoon Rallier\"\n\"BLB\"\n\"148\"\n\"0303bce7-92ec-53d3-8dc4-d27dce…\n\"collector\"\n1\n\"BLB\"\n\"foilCommon\"\n\n\n\"Tempest Angler\"\n\"BLB\"\n\"235\"\n\"039d071b-cfed-55df-ba49-51b209…\n\"collector\"\n1\n\"BLB\"\n\"foilCommon\"\n\n\n\"Bonebind Orator\"\n\"BLB\"\n\"084\"\n\"04c6c11d-d510-566e-b2bd-5a9992…\n\"collector\"\n1\n\"BLB\"\n\"foilCommon\"\n\n\n\"Carrot Cake\"\n\"BLB\"\n\"007\"\n\"06ee1d2b-9cb8-5aa6-93b5-fdf8c2…\n\"collector\"\n1\n\"BLB\"\n\"foilCommon\"\n\n\n\"Intrepid Rabbit\"\n\"BLB\"\n\"017\"\n\"0e9c0952-72c4-5ded-bdfa-9ec5d5…\n\"collector\"\n1\n\"BLB\"\n\"foilCommon\"\n\n\n\n\n\n\nTidy the booster composition, which shows which sheet names and frequencies occur in a give booster.\nDisplay the pivot to compare different booster compositions.\n\ndf_bc = boost_content.filter(pl.col(\"setCode\") == SET_CODE).filter(\n    pl.col(\"boosterName\") == BOOSTER_NAME\n)\ndf_bc.collect().pivot(values=\"sheetPicks\", on=\"boosterIndex\")\n\n\nshape: (8, 7)\n\n\n\nboosterName\nsetCode\nsheetName\n0\n1\n2\n3\n\n\nstr\nstr\nstr\ni64\ni64\ni64\ni64\n\n\n\n\n\"play\"\n\"BLB\"\n\"common\"\n7\n6\n7\n6\n\n\n\"play\"\n\"BLB\"\n\"foil\"\n1\n1\n1\n1\n\n\n\"play\"\n\"BLB\"\n\"land\"\n1\n1\nnull\nnull\n\n\n\"play\"\n\"BLB\"\n\"rareMythicWithShowcase\"\n1\n1\n1\n1\n\n\n\"play\"\n\"BLB\"\n\"uncommon\"\n3\n3\n3\n3\n\n\n\"play\"\n\"BLB\"\n\"wildcard\"\n1\n1\n1\n1\n\n\n\"play\"\n\"BLB\"\n\"theList\"\nnull\n1\nnull\n1\n\n\n\"play\"\n\"BLB\"\n\"foilLand\"\nnull\nnull\n1\n1\n\n\n\n\n\n\nTidy the booster weight. Shows the frequency at which each booster config occurs.\n\ndf_wgt = (\n    boost_weight.filter(pl.col(\"setCode\") == SET_CODE)\n    .filter(pl.col(\"boosterName\") == BOOSTER_NAME)\n    # .sort(pl.col(\"sheetName\"))\n    .with_columns(\n        (pl.col(\"boosterWeight\") / pl.col(\"boosterWeight\").sum()).alias(\"boosterConfigRate\"),\n    )\n)\ndf_wgt.collect().to_pandas()\n\n\n\n\n\n\n\n\nboosterIndex\nboosterName\nboosterWeight\nsetCode\nboosterConfigRate\n\n\n\n\n0\n0\nplay\n16\nOTJ\n0.64\n\n\n1\n1\nplay\n4\nOTJ\n0.16\n\n\n2\n2\nplay\n4\nOTJ\n0.16\n\n\n3\n3\nplay\n1\nOTJ\n0.04\n\n\n\n\n\n\n\nTidy the booster sheets data. This has some data for each sheet type.\n\ndf_bs = boost_sheets.filter(pl.col(\"setCode\") == SET_CODE).filter(\n    pl.col(\"boosterName\") == BOOSTER_NAME\n)\ndf_bs.collect().to_pandas()\n\n\n\n\n\n\n\n\nboosterName\nsetCode\nsheetHasBalanceColors\nsheetIsFoil\nsheetName\n\n\n\n\n0\nplay\nOTJ\nFalse\nFalse\nbreakingNews\n\n\n1\nplay\nOTJ\nFalse\nFalse\ncommon\n\n\n2\nplay\nOTJ\nFalse\nTrue\nfoil\n\n\n3\nplay\nOTJ\nFalse\nTrue\nfoilLand\n\n\n4\nplay\nOTJ\nFalse\nFalse\nland\n\n\n5\nplay\nOTJ\nFalse\nFalse\nrareMythicWithShowcase\n\n\n6\nplay\nOTJ\nFalse\nFalse\ntheList\n\n\n7\nplay\nOTJ\nFalse\nFalse\nuncommon\n\n\n8\nplay\nOTJ\nFalse\nFalse\nwildcard\n\n\n\n\n\n\n\nTidy the booster sheet card data. This contains the card uuid frequencies on each sheet.\n\ndf_bcards = (\n    boost_cards.filter(pl.col(\"setCode\") == SET_CODE)\n    .filter(pl.col(\"boosterName\") == BOOSTER_NAME)\n    .join(\n        cards.select([\"uuid\", \"name\", \"number\", \"rarity\"]),\n        left_on=\"cardUuid\",\n        right_on=\"uuid\",\n        how=\"inner\",\n    )\n    .with_columns(pl.col(\"cardWeight\").sum().over(\"sheetName\").alias(\"totalCardWeight\"))\n    .with_columns((pl.col(\"cardWeight\") / pl.col(\"totalCardWeight\")).alias(\"cardSheetRate\"))\n)\n\ndf_bcards.collect().to_pandas().sample(10).sort_values(\"cardSheetRate\")\n\n\n\n\n\n\n\n\nboosterName\ncardUuid\ncardWeight\nsetCode\nsheetName\nname\nnumber\nrarity\ntotalCardWeight\ncardSheetRate\n\n\n\n\n205\nplay\n7c2f8f1d-085e-5cb9-8bc6-018d3ca8c5b5\n162\nOTJ\nfoil\nDouble Down\n44\nmythic\n149634\n0.001083\n\n\n822\nplay\nf4409d13-2bcf-5d83-80e0-abdb796c070f\n8100\nOTJ\nwildcard\nCaustic Bronco\n82\nrare\n4496850\n0.001801\n\n\n124\nplay\n2ca6b276-df48-572a-8f6e-cfae9c3dc73b\n378\nOTJ\nfoil\nRictus Robber\n102\nuncommon\n149634\n0.002526\n\n\n152\nplay\n49e5eaf9-9a3f-5561-9982-58db55a14f06\n378\nOTJ\nfoil\nMobile Homestead\n245\nuncommon\n149634\n0.002526\n\n\n282\nplay\nc80f2a52-32ca-5203-a3c3-7fcc6856c2eb\n378\nOTJ\nfoil\nLavaspur Boots\n243\nuncommon\n149634\n0.002526\n\n\n174\nplay\n602d5db0-db76-5c56-9f36-1eff1c00ad66\n1120\nOTJ\nfoil\nConsuming Ashes\n83\ncommon\n149634\n0.007485\n\n\n186\nplay\n6a1018f9-ca3b-5c28-a357-de3e8c3d07da\n1120\nOTJ\nfoil\nArmored Armadillo\n3\ncommon\n149634\n0.007485\n\n\n756\nplay\nb3ed033c-9928-5a73-8da0-ff232311af60\n39200\nOTJ\nwildcard\nDjinn of Fool's Fall\n43\ncommon\n4496850\n0.008717\n\n\n75\nplay\nec54a1af-e697-5576-82af-7e04eb05dfaf\n1\nOTJ\ncommon\nSterling Keykeeper\n32\ncommon\n81\n0.012346\n\n\n364\nplay\ne8c6f29c-ed4e-574b-ba61-c6564ad84b8b\n3\nOTJ\nfoilLand\nCreosote Heath\n255\ncommon\n60\n0.050000\n\n\n\n\n\n\n\n\n\nDraw Rates per Card-Sheet-Booster Combos\nUse this for simulating booster pack draws, given rates for booster configs, sheets, and cards.\n\ndf = (\n    df_bc.join(df_wgt, on=[\"boosterIndex\", \"boosterName\", \"setCode\"], how=\"inner\")\n    .join(df_bs, on=[\"sheetName\", \"boosterName\", \"setCode\"], how=\"inner\")\n    .join(df_bcards, on=[\"sheetName\", \"boosterName\", \"setCode\"], how=\"inner\")\n    .with_columns(\n        (\n            pl.col(\"cardSheetRate\") * pl.col(\"boosterConfigRate\") * pl.col(\"sheetPicks\")\n        ).alias(\"expectedConfigCardPullRate\"),\n    )\n    .with_columns(\n        pl.col(\"expectedConfigCardPullRate\")\n        .sum()\n        .over(\"cardUuid\")\n        .alias(\"expectedCardUuidPullRate\")\n    )\n    .with_columns(\n        pl.col(\"expectedConfigCardPullRate\")\n        .sum()\n        .over(\"name\")\n        .alias(\"expectedCardNamePullRate\")\n    )\n    .sort(pl.col(\"expectedCardNamePullRate\"), descending=False)\n)\ndf.collect().write_parquet(paths[\"processed\"] / f\"{SET_CODE}_booster_sheet_card_rates.parquet\")\nprint(df.collect().shape)\ndf.filter(\n    pl.col(\"expectedCardUuidPullRate\") != pl.col(\"expectedCardNamePullRate\")\n).collect().to_pandas().sample(5)\n\n(3232, 19)\n\n\n\n\n\n\n\n\n\nboosterIndex\nboosterName\nsetCode\nsheetName\nsheetPicks\nboosterWeight\nboosterConfigRate\nsheetHasBalanceColors\nsheetIsFoil\ncardUuid\ncardWeight\nname\nnumber\nrarity\ntotalCardWeight\ncardSheetRate\nexpectedConfigCardPullRate\nexpectedCardUuidPullRate\nexpectedCardNamePullRate\n\n\n\n\n55\n1\nplay\nOTJ\nland\n1\n4\n0.16\nFalse\nFalse\nd625c38f-3b9c-59b7-85eb-e4bdfda3a8d0\n2\nSwamp\n281\ncommon\n60\n0.033333\n0.005333\n0.033333\n0.1\n\n\n13\n3\nplay\nOTJ\nfoilLand\n1\n1\n0.04\nFalse\nTrue\n6932a15f-4028-5ffb-8a25-9cf7a3a78df3\n2\nPlains\n278\ncommon\n60\n0.033333\n0.001333\n0.033333\n0.1\n\n\n10\n2\nplay\nOTJ\nfoilLand\n1\n4\n0.16\nFalse\nTrue\n4a1a324d-b930-5afb-845c-2410c98d4b28\n2\nSwamp\n274\ncommon\n60\n0.033333\n0.005333\n0.033333\n0.1\n\n\n0\n2\nplay\nOTJ\nfoilLand\n1\n4\n0.16\nFalse\nTrue\n053ded5c-2cea-5a75-a55e-daf37e2ea91e\n2\nMountain\n275\ncommon\n60\n0.033333\n0.005333\n0.033333\n0.1\n\n\n38\n0\nplay\nOTJ\nland\n1\n16\n0.64\nFalse\nFalse\n452d4eaf-d736-5dbf-9fc2-cb35022ee7d9\n2\nForest\n276\ncommon\n60\n0.033333\n0.021333\n0.033333\n0.1\n\n\n\n\n\n\n\n\n\nDraw Rates per Card, Aggregated\nUse this for per-card draw rates. Takes above dataset and aggregates the booster configs and sheets types.\n\ndf_card_rates = (\n    df.group_by([\"cardUuid\", \"boosterName\"])\n    .first()\n    .select(\n        [\n            \"cardUuid\",\n            \"name\",\n            \"number\",\n            \"setCode\",\n            \"boosterName\",\n            \"expectedCardUuidPullRate\",\n            \"expectedCardNamePullRate\",\n        ]\n    )\n)\ndf_card_rates.collect().write_parquet(\n    paths[\"processed\"] / f\"{SET_CODE}_card_pull_rates.parquet\"\n)\ndf_card_rates.collect().sort(\n    \"expectedCardUuidPullRate\", pl.col(\"number\").str.zfill(3)\n).to_pandas().head(5)\n\n\n\n\n\n\n\n\ncardUuid\nname\nnumber\nsetCode\nboosterName\nexpectedCardUuidPullRate\nexpectedCardNamePullRate\n\n\n\n\n0\n53a66eef-e857-53da-b23c-93a9926f8a9e\nGeralf, the Fleshwright\n50\nOTJ\nplay\n0.006437\n0.006437\n\n\n1\nda46f56f-f4a8-58de-8a30-f6bd1de92add\nGisa, the Hellraiser\n89\nOTJ\nplay\n0.006437\n0.006437\n\n\n2\nd9ddb794-3cb2-5a53-97d2-20375d1c607d\nTinybones, the Pickpocket\n109\nOTJ\nplay\n0.006437\n0.006437\n\n\n3\n63c69341-9c62-550f-994e-8ec0ab0c0c46\nAnnie Flash, the Veteran\n190\nOTJ\nplay\n0.006437\n0.006437\n\n\n4\n83d76712-309f-532d-bbd6-d92a3b0870d4\nKellan, the Kid\n213\nOTJ\nplay\n0.006437\n0.006437"
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-22-price-data-wrangle.html",
    "href": "notebooks/01-mtgjson-data/01-22-price-data-wrangle.html",
    "title": "Summary",
    "section": "",
    "text": "The code to acquire and pre-process the all price data to use for future analysis.\n\n# Setup Notebook\nimport os\nif os.path.basename(os.getcwd()) != \"mtg-modeling\":\n    get_ipython().run_line_magic(\"run\", '-i \"../../scripts/notebook_header.py\"')  # type: ignore\n\nChanged working directory to: d:\\mtg-modeling\n\n\n\nimport pandas as pd\nimport polars as pl\nfrom src.data.mtgjson_wrangler import MtgPricesJsonWrangler\n\n\nPROCESS_DATA = True\n\nfilename = \"flat_prices_2024-05-25_2024-08-24.parquet\"\n\npaths = {\n    \"raw_file\": Path(\"data/raw/mtgjson/AllPrices/AllPrices.json\"),\n    \"interim\": Path(\"data/interim/mtgjson/AllPrices\"),\n    \"interim_cards\": Path(\"data/interim/mtgjson/AllPrintings\"),\n    \"processed\": Path(\"data/processed/mtgjson/AllPrices\"),\n}\n\n\nif PROCESS_DATA:\n    wrangler = MtgPricesJsonWrangler(paths)\n    wrangler.raw_json_to_parquet()\n    wrangler.unstack_data()\nelse:\n    wrangler = MtgPricesJsonWrangler(paths, filename=filename)\n\ndf = wrangler.load_data()\ndf.shape\n\nReading JSON\nWriting data...\nMetadata written!\nInterim data written!\nUnstacking data...\nData unstacked!\nSaving data...\nData saved!\nFinal data loaded!\n\n\n(46959192, 8)\n\n\n\ndf_cards = (\n    pl.scan_parquet(paths[\"interim_cards\"] /  \"wide_cards.parquet\")\n    .select([\"uuid\", \"name\", \"setCode\", \"number\", \"rarity\", \"type\", \"colors\"])\n    .collect()\n)\ndf_cards.shape\n\n(96216, 7)\n\n\n\ndf_full = df.join(df_cards, on=\"uuid\", how=\"inner\")\nprint(f\"Shape: {df_full.shape}\")\nprint(f\"Mem Size in GB: {df_full.estimated_size() / (1024**3):.2f}\")\ndf_full.head(1)\n\nShape: (46602076, 14)\nMem Size in GB: 5.41\n\n\n\nshape: (1, 14)\n\n\n\nuuid\nmedium\nproviders\ncurrency\nlist\nfinish\ndate\nprice\nname\nsetCode\nnumber\nrarity\ntype\ncolors\n\n\nstr\nstr\nstr\nstr\nstr\nstr\ndate\nf64\nstr\nstr\nstr\nstr\nstr\nstr\n\n\n\n\n\"00010d56-fe38-5e35-8aed-518019…\n\"paper\"\n\"cardkingdom\"\n\"USD\"\n\"buylist\"\n\"foil\"\n2024-05-23\n5.0\n\"Sphinx of the Final Word\"\n\"POGW\"\n\"63s\"\n\"mythic\"\n\"Creature — Sphinx\"\n\"U\"\n\n\n\n\n\n\n\nmin_date = df_full[\"date\"].min()\nmax_date = df_full[\"date\"].max()\ndf_full.write_parquet(paths[\"interim\"] / f\"wide_prices_{min_date}_{max_date}.parquet\")\n\n\ndf_otj = df_full.filter(\n    pl.col(\"setCode\") == \"OTJ\"\n)\ndf_otj.write_parquet(paths[\"processed\"] / f\"prices_OTJ_{min_date}_{max_date}.parquet\")\ndf_otj.shape\n\n(268816, 14)"
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-20-card-data-wrangle.html",
    "href": "notebooks/01-mtgjson-data/01-20-card-data-wrangle.html",
    "title": "Summary",
    "section": "",
    "text": "Wrangle the all card data. Joins set data as well. Then selects Standard Legal cards and other interesting data sets.\n# Setup Notebook\nimport os\nif os.path.basename(os.getcwd()) != \"mtg-modeling\":\n    get_ipython().run_line_magic(\"run\", '-i \"../../scripts/notebook_header.py\"')  # type: ignore\nimport pandas as pd\nimport polars as pl\nSET_CODE = \"BLB\"\n\npaths = {\n    \"raw\": Path(\"data/raw/mtgjson/AllPrintingsParquetFiles\"),\n    \"interim\": Path(\"data/interim/mtgjson/AllPrintings\"),\n    \"processed\": Path(\"data/processed/mtgjson/AllPrintings\"),\n}\n\npaths['raw'].exists()\nos.makedirs(paths[\"interim\"], exist_ok=True)\nos.makedirs(paths[\"processed\"], exist_ok=True)\ncards = pl.scan_parquet(paths[\"raw\"] / \"cards.parquet\")\nlegalities = pl.scan_parquet(paths[\"raw\"] / \"cardLegalities.parquet\")\npurchase_urls = pl.scan_parquet(paths[\"raw\"] / \"cardPurchaseUrls.parquet\")\nsets = pl.scan_parquet(paths[\"raw\"] / \"sets.parquet\")\ncards.collect().columns\n\n['artist',\n 'artistIds',\n 'asciiName',\n 'attractionLights',\n 'availability',\n 'boosterTypes',\n 'borderColor',\n 'cardParts',\n 'colorIdentity',\n 'colorIndicator',\n 'colors',\n 'defense',\n 'duelDeck',\n 'edhrecRank',\n 'edhrecSaltiness',\n 'faceConvertedManaCost',\n 'faceFlavorName',\n 'faceManaValue',\n 'faceName',\n 'finishes',\n 'flavorName',\n 'flavorText',\n 'frameEffects',\n 'frameVersion',\n 'hand',\n 'hasAlternativeDeckLimit',\n 'hasContentWarning',\n 'hasFoil',\n 'hasNonFoil',\n 'isAlternative',\n 'isFullArt',\n 'isFunny',\n 'isOnlineOnly',\n 'isOversized',\n 'isPromo',\n 'isRebalanced',\n 'isReprint',\n 'isReserved',\n 'isStarter',\n 'isStorySpotlight',\n 'isTextless',\n 'isTimeshifted',\n 'keywords',\n 'language',\n 'layout',\n 'leadershipSkills',\n 'life',\n 'loyalty',\n 'manaCost',\n 'manaValue',\n 'name',\n 'number',\n 'originalPrintings',\n 'originalReleaseDate',\n 'originalText',\n 'originalType',\n 'otherFaceIds',\n 'power',\n 'printings',\n 'promoTypes',\n 'rarity',\n 'rebalancedPrintings',\n 'relatedCards',\n 'securityStamp',\n 'setCode',\n 'side',\n 'signature',\n 'sourceProducts',\n 'subsets',\n 'subtypes',\n 'supertypes',\n 'text',\n 'toughness',\n 'type',\n 'types',\n 'uuid',\n 'variations',\n 'watermark']\nresults = (\n    cards\n    .join(sets, left_on='setCode', right_on='code', how='left')\n    .join(legalities, on='uuid', how='left')\n    .join(purchase_urls, on='uuid', how='left')\n)\n\nwide_cards = results.collect()\nwide_cards.write_parquet(paths[\"interim\"] / \"wide_cards.parquet\")\nprint(wide_cards.shape)\n\n(96216, 127)"
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-20-card-data-wrangle.html#data-for-standard-legal-cards",
    "href": "notebooks/01-mtgjson-data/01-20-card-data-wrangle.html#data-for-standard-legal-cards",
    "title": "Summary",
    "section": "Data for Standard Legal Cards",
    "text": "Data for Standard Legal Cards\nUsed for analysis of the Standard format.\nSee the MTG Wiki Standard/Timeline page for validate correct card composition.\n\nstandard_results = (\n    results\n    .filter(pl.col('standard') == 'Legal')\n    .filter(pl.col('borderColor') == 'black')\n    .filter(pl.col('isPromo').is_null())\n    # .filter(pl.col('isReprint').is_null())\n    .filter(pl.col('promoTypes').is_null())\n    .sort(pl.col('name'), descending=False)\n    .sort(pl.col('releaseDate'), descending=False)\n    .sort(pl.col('power'), descending=False)\n)\n\nstandard_cards = standard_results.collect()\nstandard_cards.write_parquet(paths[\"processed\"] / \"standard_cards.parquet\")\nprint(standard_cards.shape)\n\n(6344, 127)"
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-20-card-data-wrangle.html#outlaws-of-thunder-junction-standard-legal-set",
    "href": "notebooks/01-mtgjson-data/01-20-card-data-wrangle.html#outlaws-of-thunder-junction-standard-legal-set",
    "title": "Summary",
    "section": "Outlaws of Thunder Junction Standard Legal Set",
    "text": "Outlaws of Thunder Junction Standard Legal Set\nPer the wiki, there should be 271 cards in the OTJ set.\n\notj_results = (\n    results\n    .filter(pl.col('standard') == 'Legal')\n    .filter(pl.col('borderColor') == 'black')\n    .filter(pl.col('isPromo').is_null())\n    # .filter(pl.col('isReprint').is_null())\n    .filter(pl.col('promoTypes').is_null())\n    .filter(pl.col('setCode') == SET_CODE)\n    .sort(pl.col('number'))\n)\n\notj_cards = otj_results.collect()\notj_cards.write_parquet(paths[\"processed\"] / f\"{SET_CODE}_std_cards.parquet\")\notj_cards_ids = (\n    otj_cards.select([pl.col(\"name\"), pl.col(\"number\").str.zfill(3)])\n    .sort(pl.col(\"number\"))\n    .to_pandas()\n)\n\n\notj_core_results = (\n    otj_results\n    .select([\n        pl.col('name'),\n        pl.col('setCode'),\n        pl.col('releaseDate'),\n        pl.col('number').str.zfill(3),\n        pl.col('layout'),\n        pl.col('availability'),\n        pl.col('power'),\n        pl.col('toughness'),\n        pl.col('colorIdentity'),\n        pl.col('colors'),\n        pl.col('types'),\n        pl.col('subtypes'),\n        pl.col('supertypes'),\n        pl.col('manaCost'),\n        pl.col('manaValue'),\n        pl.col('edhrecRank'),\n        pl.col('edhrecSaltiness'),\n        pl.col('text'),\n        pl.col('flavorText'),\n    ])\n)\n\notj_core_cards = otj_core_results.collect()\notj_core_cards.write_parquet(paths[\"processed\"] / f\"{SET_CODE}_std_thin.parquet\")\notj_core_cards.head()\n\n\nshape: (5, 19)\n\n\n\nname\nsetCode\nreleaseDate\nnumber\nlayout\navailability\npower\ntoughness\ncolorIdentity\ncolors\ntypes\nsubtypes\nsupertypes\nmanaCost\nmanaValue\nedhrecRank\nedhrecSaltiness\ntext\nflavorText\n\n\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nstr\nf64\nf64\nf64\nstr\nstr\n\n\n\n\n\"Banishing Light\"\n\"BLB\"\n\"2024-08-02\"\n\"001\"\n\"normal\"\n\"arena, mtgo, paper\"\nnull\nnull\n\"W\"\n\"W\"\n\"Enchantment\"\n\"\"\n\"\"\n\"{2}{W}\"\n3.0\n2267.0\n0.21\n\"When Banishing Light enters, e…\n\"\"If you cannot find light in t…\n\n\n\"Dewdrop Cure\"\n\"BLB\"\n\"2024-08-02\"\n\"010\"\n\"normal\"\n\"arena, mtgo, paper\"\nnull\nnull\n\"W\"\n\"W\"\n\"Sorcery\"\n\"\"\n\"\"\n\"{2}{W}\"\n3.0\n15834.0\nnull\n\"Gift a card (You may promise a…\nnull\n\n\n\"Maha, Its Feathers Night\"\n\"BLB\"\n\"2024-08-02\"\n\"100\"\n\"normal\"\n\"arena, mtgo, paper\"\n\"6\"\n\"5\"\n\"B\"\n\"B\"\n\"Creature\"\n\"Elemental, Bird\"\n\"Legendary\"\n\"{3}{B}{B}\"\n5.0\n11109.0\nnull\n\"Flying, trample\\nWard—Discard …\n\"Its wingspan reaches from dusk…\n\n\n\"Moonstone Harbinger\"\n\"BLB\"\n\"2024-08-02\"\n\"101\"\n\"normal\"\n\"arena, mtgo, paper\"\n\"1\"\n\"3\"\n\"B\"\n\"B\"\n\"Creature\"\n\"Bat, Warrior\"\n\"\"\n\"{2}{B}\"\n3.0\n16560.0\nnull\n\"Flying, deathtouch\\nWhenever y…\n\"Moonstone weapons drink in the…\n\n\n\"Nocturnal Hunger\"\n\"BLB\"\n\"2024-08-02\"\n\"102\"\n\"normal\"\n\"arena, mtgo, paper\"\nnull\nnull\n\"B\"\n\"B\"\n\"Instant\"\n\"\"\n\"\"\n\"{2}{B}\"\n3.0\n19199.0\nnull\n\"Gift a Food (You may promise a…\nnull"
  },
  {
    "objectID": "notebooks/03-network-data/03-XX-wrangle-network.html",
    "href": "notebooks/03-network-data/03-XX-wrangle-network.html",
    "title": "Summary",
    "section": "",
    "text": "Create the card-deck network data.\n\nimport pandas as pd\nimport networkx as nx\n\n\ndf = pd.read_feather('../../data/OTJ/deck_melt_card.feather')\ndf\n\n\n\n\n\n\n\n\ndraft_idx\nwon\ncard\nin_deck\nname\nsetCode\nreleaseDate\nnumber\nlayout\navailability\n...\ntoughness\ncolorIdentity\ncolors\ntypes\nsubtypes\nsupertypes\nmanaCost\nmanaValue\nedhrecRank\nedhrecSaltiness\n\n\n\n\n0\n96414\nTrue\nRazzle-Dazzler\nFalse\nRazzle-Dazzler\nOTJ\n2024-04-19\n63\nnormal\narena, mtgo, paper\n...\n2\nU\nU\nCreature\nHuman, Wizard\n\n{1}{U}\n2.0\n17822.0\nNaN\n\n\n1\n170600\nTrue\nRazzle-Dazzler\nFalse\nRazzle-Dazzler\nOTJ\n2024-04-19\n63\nnormal\narena, mtgo, paper\n...\n2\nU\nU\nCreature\nHuman, Wizard\n\n{1}{U}\n2.0\n17822.0\nNaN\n\n\n2\n157994\nTrue\nRazzle-Dazzler\nFalse\nRazzle-Dazzler\nOTJ\n2024-04-19\n63\nnormal\narena, mtgo, paper\n...\n2\nU\nU\nCreature\nHuman, Wizard\n\n{1}{U}\n2.0\n17822.0\nNaN\n\n\n3\n35865\nTrue\nRazzle-Dazzler\nFalse\nRazzle-Dazzler\nOTJ\n2024-04-19\n63\nnormal\narena, mtgo, paper\n...\n2\nU\nU\nCreature\nHuman, Wizard\n\n{1}{U}\n2.0\n17822.0\nNaN\n\n\n4\n1123\nTrue\nRazzle-Dazzler\nFalse\nRazzle-Dazzler\nOTJ\n2024-04-19\n63\nnormal\narena, mtgo, paper\n...\n2\nU\nU\nCreature\nHuman, Wizard\n\n{1}{U}\n2.0\n17822.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n19999995\n59177\nFalse\nPitiless Carnage\nFalse\nPitiless Carnage\nOTJ\n2024-04-19\n326\nnormal\narena, mtgo, paper\n...\nNone\nB\nB\nSorcery\n\n\n{3}{B}\n4.0\n8598.0\nNaN\n\n\n19999996\n122497\nFalse\nPitiless Carnage\nFalse\nPitiless Carnage\nOTJ\n2024-04-19\n326\nnormal\narena, mtgo, paper\n...\nNone\nB\nB\nSorcery\n\n\n{3}{B}\n4.0\n8598.0\nNaN\n\n\n19999997\n22923\nFalse\nPitiless Carnage\nFalse\nPitiless Carnage\nOTJ\n2024-04-19\n326\nnormal\narena, mtgo, paper\n...\nNone\nB\nB\nSorcery\n\n\n{3}{B}\n4.0\n8598.0\nNaN\n\n\n19999998\n167501\nFalse\nPitiless Carnage\nFalse\nPitiless Carnage\nOTJ\n2024-04-19\n326\nnormal\narena, mtgo, paper\n...\nNone\nB\nB\nSorcery\n\n\n{3}{B}\n4.0\n8598.0\nNaN\n\n\n19999999\n172092\nTrue\nPitiless Carnage\nFalse\nPitiless Carnage\nOTJ\n2024-04-19\n326\nnormal\narena, mtgo, paper\n...\nNone\nB\nB\nSorcery\n\n\n{3}{B}\n4.0\n8598.0\nNaN\n\n\n\n\n20000000 rows × 21 columns\n\n\n\n\ndf_filtered = df[df['in_deck']]\nlen(df_filtered)\n\n1456848\n\n\n\nB = nx.Graph()\n\n\nB.add_nodes_from(df_filtered['draft_idx'], bipartite=0)\nB.add_nodes_from(df_filtered['card'], bipartite=1)\n\n\nB.add_edges_from(df_filtered[['draft_idx', 'card']].values)\n\n\nB.number_of_nodes(), B.number_of_edges()\n\n(128487, 939328)"
  },
  {
    "objectID": "notebooks/00-intro/00-00-table-of-contents.html",
    "href": "notebooks/00-intro/00-00-table-of-contents.html",
    "title": "Table of Contents",
    "section": "",
    "text": "00 INTRO\n\n00 00 TABLE OF CONTENTS\n00 10 INTRODUCTION: An introduction to the entire project.\n00 20 CAUSAL DAGS: Exploring the causal relationships involved in gameplay and card economics, such as card impact in draft play and secondary market card value.\n00 30 STATEGY REVIEW: A review of prevalent MTG gameplay strategies.\n00 40 GLOSSARY: A glossary of MTG and data science terms.\n\n01 MTGJSON DATA\n\n01 00 MTGJSON DATA INTRO: An introduction to the MTGJSON card data, including reviewing the data files and column features.\n01 10! LEGACY QUERY\n01 10 GET CARD DATA: The code to acquire and pre-process the data to use for future analysis.\n01 20! WRANGLE JOINS\n01 20 CARD DATA WRANGLE: The code to wrangle the data. Deal with NAs, join data frames, etc.\n01 30 CARD FEATURES EDA: Exploratory data analysis of basic card features (e.g. power and toughness)\n\n02 DRAFT DATA\n\n02 00 DRAFT DATA INTRO: An introduction to the 17lands draft gameplay data, including reviewing the data files and column features.\n02 10 GET DRAFT DATA: The code to acquire and pre-process the data to use for future analysis.\n02 20 DRAFT DATA WRANGLE: The code to wrangle the data. Deal with NAs, join data frames, etc.\n02 30 DRAFT EDA: Exploratory data analysis of draft data (e.g. win rates)\n\n03 NETWORK DATA\n\n03 XX WRANGLE NETWORK: Create the card-deck network data.\n\n\n\nimport os"
  },
  {
    "objectID": "notebooks/00-intro/00-10-introduction.html",
    "href": "notebooks/00-intro/00-10-introduction.html",
    "title": "Summary",
    "section": "",
    "text": "An introduction to the entire project."
  },
  {
    "objectID": "notebooks/00-intro/00-10-introduction.html#card-scope",
    "href": "notebooks/00-intro/00-10-introduction.html#card-scope",
    "title": "Summary",
    "section": "Card Scope",
    "text": "Card Scope\n\nOTJ Set Description\nTo keep the problem space tractable, I’ll limit the analysis to the Outlaws of Thunder Junction (OTJ) set, which was released on April 19, 2024.\nThe set contains 276 regular cards comprised of:\n\n91 Commons\n100 Uncommons\n60 Rares\n20 Mythic rares\n5 Basic lands\n\nAdditional “booster fun” cards include: - 13 Showcase “Wanted Poster” cards - 60 Extended Art cards - 13 Borderless cards - 6 Bundle Basics lands - 7 Promos\nFor game play analysis, I’ll focus on the 276 regular cards. For market analysis, I’ll include the booster fun cards, as the scarcity and desirability of these cards may affect the secondary market prices and will be interesting to explore.\n\n\nCard Data Sources\nI’ll use the card data generously made available by the tireless folks at the open-source project MTGJSON. MTGJSON provides a comprehensive database of MTG cards, including card attributes, card text, and card prices. The data is available in JSON format, which I’ll convert to a pandas DataFrame for analysis.\nMTGJSON sources a lot of data from Scryfall, which has an excellent webapp for exploring MTG card data.\nMTGJSON sources the booster pack composition data from. The source code provided by taw on github contains estimated booster pack composition probabilities. He also provides a webapp at mtg.wtf. Note that booster pack composition is proprietary information of Wizards of the Coast, and the above probabilities are estimates.\nSee the 01-00-mtgjson-data-intro notebook for more details on the data sources."
  },
  {
    "objectID": "notebooks/00-intro/00-10-introduction.html#play-format-scope",
    "href": "notebooks/00-intro/00-10-introduction.html#play-format-scope",
    "title": "Summary",
    "section": "Play Format Scope",
    "text": "Play Format Scope\n\nLimited Play\nFor game play, I will look at limited formats, such as Draft and Sealed Deck. Constructed formats, such as Standard, Modern, and Legacy, are out of scope for now. This is due to the complexity of the metagame and the vast number of cards available for deck construction.\nDraft play also allows us to study three types of player skill. First, there is the skill of drafting the best cards from the draft pool based on one’s currently drafted cards. Second, there is the skill of deck construction from the drafted cards. Third, there is the skill of playing the deck in a tournament setting.\nSealed and constructed formats are also interesting, but exclude the drafting skill. Constructed formats also require a deep understanding of the metagame, which is out of scope for now.\n\n\nMTG Arena Draft\nI will specifically look at the Draft format on MTG Arena. MTG Arena is an online platform for playing MTG. The Draft format on MTG Arena is a popular way to play limited MTG. In the Draft format, players open booster packs and pick one card from the pack. The remaining cards are passed to the next player. This process continues until all cards are picked. Players then construct a deck from the picked cards and play a tournament with the constructed deck.\nMTG Arena offers several Draft formats. I will focus on the Premier Draft format, which is a best-of-one (Bo1) format. In the Premier Draft format, players draft against other players in a pod of 8 players. Players play a tournament with the drafted deck. Players play until they reach 7 wins or 3 losses. Players have a sideboard and are allowed to change the deck composition between games.\nOther formats include Quick Draft, which also Bo1, but the drafting process in against a pool of bots, and play is against players with independent draft pools. Traditional Draft is a best-of-three (Bo3) format. Sealed Deck is another limited format where players open 6 booster packs and construct a deck from the opened cards. These are out of scope for now.\n\n\nDraft Play Data Sources\nFor draft play, I will used data from 17lands. They compile data from their user base to provide draft pick data. The data includes the draft pick order, the cards picked, and the win rate of the deck.\nSee the 02-10-draft-data-intro notebook for more information on the draft data."
  },
  {
    "objectID": "notebooks/00-intro/00-30-stategy-review.html",
    "href": "notebooks/00-intro/00-30-stategy-review.html",
    "title": "Summary",
    "section": "",
    "text": "A review of prevalent MTG gameplay strategies.\n\nStrategy & Game Theory\n\n\nConcepts\n\nCard Economy\n\nCard Parity (2-for-1)\nTempo\nMana Efficiency\nCard Quality\nCard Filtering\nValue Engine\nResource Denial\nGraveyard as a Resource\nHand Disruption\nDraw Engine\nCantrips\nOverextending\n\nBoard State Theories\n\nQuadrant Theory\n\nopening\nparity\nwinning\nlosing\n\nMana Curve Theory\nTreat Assessment and Removal Management\nTempo Theory\nCard Advantage\n\nRaw\nVirtual\nTempo-Based\n\nBoard Control Theory\nThe Theory of Initiative\nInevitability Theory\nCritical Turn Theory\nRisk vs. Reward Theory\nResource Accumulation vs. Deployment\n\nDrafting Theories\n\nBREAD Theory\n\nBombs\nRemoval\nEvasion\nAggro\nDuds\n\nSignaling\nCurve Consideration\nArchetype Drafting\nReading the Pack\nHate Drafting\nConsistency vs. Power\nWheeling\nStaying Open\nSideboarding in Draft\nBomb Reliance vs. Synergy\nSplashing\n\nDeck-building Theories\n\nMana Curve Theory\nCard Advantage Theory\nSynergy vs. Raw Power\nTempo Theory\nMana Base Construction\n40-23-17 Rule (Limited)\nRole Identification\nCard Selection Theory\nWin Condition Theory\nMetagame Consideration\nCurve Toppers and Finishers\nRedundancy vs. Versatility\nSideboard Theory\nTesting and Iteration\nDeck Identity"
  },
  {
    "objectID": "notebooks/00-intro/00-20-causal-dags.html",
    "href": "notebooks/00-intro/00-20-causal-dags.html",
    "title": "Summary",
    "section": "",
    "text": "Exploring the causal relationships involved in gameplay and card economics, such as card impact in draft play and secondary market card value."
  },
  {
    "objectID": "notebooks/00-intro/00-20-causal-dags.html#card-impact",
    "href": "notebooks/00-intro/00-20-causal-dags.html#card-impact",
    "title": "Summary",
    "section": "Card Impact",
    "text": "Card Impact\nI will use the term impact to describe the ability of a card to contribute to winning a game. The impact of the card is the abstract concept that we are trying to measure. The impact of a card is not directly observable, but we can infer it from the a player’s success with or without the card in the play deck.\nCommon terms for card impact can be power level or playability. These terms are often used interchangeably, but I will use impact to describe the abstract concept of a card’s ability to contribute to winning a game.\nWhile impact can not be directly measured or observed, the card’s rarity (common, uncommon, rare, mythic rare) is often used as a proxy for the cards impact. This is an imperfect measure of impact and ideally I will find a more reliable means of modeling impact.\nI’ll start a DAG with the impact. Since the impact can not be directly measured or observed, I mark it with a dashed line to indicate it is a latent variable.\n\n\nfrom graphviz import Digraph\nfrom IPython.display import Image\n\n# Initialize a directed graph\ndot = Digraph(comment='Card Impact', format='png')\ndot.attr(rankdir='LR')\n\n# Define the impact node\ndot.node(name='I', label='Impact', shape='oval', style='dashed')\n\n# Render and display the graph in Jupyter Notebook\nImage(dot.render(filename='../../images/dags/dags', format='png', cleanup=True))"
  },
  {
    "objectID": "notebooks/00-intro/00-20-causal-dags.html#card-success",
    "href": "notebooks/00-intro/00-20-causal-dags.html#card-success",
    "title": "Summary",
    "section": "Card Success",
    "text": "Card Success\nI am calling the outcome of using a card in a deck that card’s success. This abstract concept can take many forms. The obvious one is the win rate of a deck containing the card and can be expanded to a player’s win record when using a given deck. Other forms can be the card’s pick rate in a draft or the card’s play rate from the hand. When looking at replay data, one can also examine resource trade-off, such as the card parity - how many cards are consumed by the player versus the opponent when playing a given card.\nThe win rate can further be refined, such as the starting hand win rate, the non-starting hand win rate, and the not in hand win rate indicating the win rate if a card is played from the starting hand, played when not in starting hand, or never played.\nI infer that impact of the played cards will effect the success of the game. I’ll update the DAG to reflect this.\n\n# Add success node\ndot.node(name='S', label='Success', shape='oval')\n\n# Define edges for fields and relationships\ndot.edge(tail_name='I', head_name='S')\n\n\n# Render and display the graph in Jupyter Notebook\nImage(dot.render(filename='../../images/dags/dags', format='png', cleanup=True))"
  },
  {
    "objectID": "notebooks/00-intro/00-20-causal-dags.html#card-attributes",
    "href": "notebooks/00-intro/00-20-causal-dags.html#card-attributes",
    "title": "Summary",
    "section": "Card Attributes",
    "text": "Card Attributes\nA card’s attributes are the aspect of the card that affect playability. I will only include items that directly affect a card’s impact.\nAttributes affecting Impact: - Mana Cost - Card Type - (creature, instant, etc.) - Power/Toughness - Keywords - Text Description\nA lot of attributes do not affect a card’s impact, but are used as proxies for impact.\nProxy Attributes: - Rarity - While the rarity itself does not affect a card’s impact, more rare cards often correlate with higher card impact. But changing or removing the rarity symbol on a card would have no mechanical affect. - Card Name - perhaps a bit philosophical, the name itself does not affect a card’s impact. One can have mechanically equivalent cards with different names (“…a black lotus by any other name…”). - Set - often used as a proxy, as some sets are seen as more powerful that others. - Variant Art - affects collectablity and price, but not gameplay.\nThe DAG is updated to show how attributes affect impact.\n\ndot.node(name='A', label='Attributes', shape='oval')\ndot.edge(tail_name='A', head_name='I')\nImage(dot.render(filename='../../images/dags/dags', format='png', cleanup=True))"
  },
  {
    "objectID": "notebooks/00-intro/00-20-causal-dags.html#context-within-deck-composition",
    "href": "notebooks/00-intro/00-20-causal-dags.html#context-within-deck-composition",
    "title": "Summary",
    "section": "Context within Deck Composition",
    "text": "Context within Deck Composition\nIf a card interacts well with the other cards in it’s deck, that will increase the card’s impact in a game.\nAn obvious example of this interaction is the problem of adding a mythic rare green card will to a deck without green mana. This card will not be playable and it will act as dead-weight in the deck. This card would have negative impact on game success.\nConversely, a card that adds bonuses to tokens in a deck with lots of token generation would have a large positive impact. Below I update the DAG to reflect this relationship.\n\ndot.node(name='D', label='Deck', shape='oval')\ndot.edge(tail_name='D', head_name='I')\nImage(dot.render(filename='../../images/dags/dags', format='png', cleanup=True))"
  },
  {
    "objectID": "notebooks/00-intro/00-20-causal-dags.html#player-skill",
    "href": "notebooks/00-intro/00-20-causal-dags.html#player-skill",
    "title": "Summary",
    "section": "Player Skill",
    "text": "Player Skill\nA card’s impact is situational, with a highly skill player will using a card in ways to maximize this impact. This can be done in drafting, deck building, and gameplay.\nA low skilled player with high impact cards could have game success equal to a high skilled player with low impact cards. Increasing both skill and impact should increase success.\nSince a player’s skill can affect both deck composition and situational card impact, the DAG is updated accordingly. We can’t directly observe a player’s skill, so it is indicated as a latent variable.\n\ndot.node(name='P', label='Player', shape='oval', style='dashed')\ndot.edge(tail_name='P', head_name='I')\ndot.edge(tail_name='P', head_name='D')\nImage(dot.render(filename='../../images/dags/dags', format='png', cleanup=True))"
  },
  {
    "objectID": "notebooks/00-intro/00-20-causal-dags.html#board-state",
    "href": "notebooks/00-intro/00-20-causal-dags.html#board-state",
    "title": "Summary",
    "section": "Board State",
    "text": "Board State\nThe board state also affects a card’s impact. A card that gives bonuses to all tokens in play has much higher impact when the player has many tokens in play.\nThe board state can be both permanent resources (creatures, life, cards in hand) and temporary resources (untapped lands, untapped creatures).\nThe current board state affects a card’s impact. The card can then affect the future board state. This results in a causal loop that isn’t well suited for the DAG approach, so I will only consider the current board state on card impact.\nA player’s skill also affects the board state, with skilled players building states that better favor cards to be played.\n\ndot.node(name='B', label='Board State', shape='oval')\ndot.edge(tail_name='B', head_name='I')\ndot.edge(tail_name='P', head_name='B')\nImage(dot.render(filename='../../images/dags/dags', format='png', cleanup=True))"
  },
  {
    "objectID": "notebooks/00-intro/00-20-causal-dags.html#opponents",
    "href": "notebooks/00-intro/00-20-causal-dags.html#opponents",
    "title": "Summary",
    "section": "Opponents",
    "text": "Opponents\nSince this is a competitive game, the opponent will also affect the current board state. Factors such as the opponent’s skill and deck composition will impact the state of the board. An opponent has latent attributes, such as skill.\n\ndot.node(name='O', label='Opponent', shape='oval', style='dashed')\ndot.edge(tail_name='O', head_name='B')\nImage(dot.render(filename='../../images/dags/dags', format='png', cleanup=True))"
  },
  {
    "objectID": "notebooks/00-intro/00-20-causal-dags.html#conclusion",
    "href": "notebooks/00-intro/00-20-causal-dags.html#conclusion",
    "title": "Summary",
    "section": "Conclusion",
    "text": "Conclusion\nWe can see above that a lot of factors affect a card’s impact on gameplay success. The card’s attributes, the deck composition, and board state are all observable, so we will build models that account for this. Conversely, the player’s skill and the opponent’s skill and deck are unobserved, and will be more challenging to model.\nThe first step will to do some exploratory data analysis. I will then develop some models to explore these causal relationship and infer the latent variables, such as card impact and player skill."
  },
  {
    "objectID": "notebooks/00-intro/00-20-causal-dags.html#supply-and-demand",
    "href": "notebooks/00-intro/00-20-causal-dags.html#supply-and-demand",
    "title": "Summary",
    "section": "Supply and Demand",
    "text": "Supply and Demand\nThe conventional wisdom in economics is that demand pressure to acquire the card will positively affect price. Conversely, increased supply of a card for a fixed demand will drive down price.\nBoth supply and demand are unobserved phenomenon.\nA card’s impact in gameplay will affect demand. Higher impact cards will typically be in higher demand.\n\ndot.node(name='S', label='Supply', shape='oval', style='dashed')\ndot.node(name='D', label='Demand', shape='oval', style='dashed')\ndot.edge(tail_name='I', head_name='D')\ndot.edge(tail_name='S', head_name='V')\ndot.edge(tail_name='D', head_name='V')\nImage(dot.render(filename='../../images/dags/dags', format='png', cleanup=True))"
  },
  {
    "objectID": "notebooks/00-intro/00-20-causal-dags.html#print-supply",
    "href": "notebooks/00-intro/00-20-causal-dags.html#print-supply",
    "title": "Summary",
    "section": "Print Supply",
    "text": "Print Supply\nHow does a card’s rarity work in this DAG? In the context of a given set, we know high rarity cards are printed less.\nReprints of a card in new sets will increase supply.\nAcross sets, we will assume that more rare cards will be reprinted less frequently. This assumption should be tested.\nBoth rarity and reprints can be combined into a card’s print quantity, which is the primary market supply controlled by WOTC.\n\ndot.node(name='P', label='Print Quantity', shape='oval')\ndot.edge(tail_name='P', head_name='S')\nImage(dot.render(filename='../../images/dags/dags', format='png', cleanup=True))"
  },
  {
    "objectID": "notebooks/00-intro/00-20-causal-dags.html#market-hype",
    "href": "notebooks/00-intro/00-20-causal-dags.html#market-hype",
    "title": "Summary",
    "section": "Market Hype",
    "text": "Market Hype\nThere is also a element of market hype that impacts the supply and demand of card. This can be from the card’s use in a high-profile tournament, popularity with collectors of an alternate art piece, or financial market bear and bull feedback.\nRegardless of the source, a given card value may be misaligned from it’s gameplay impact and primary print supply.\nHype is also a latent variable.\n\ndot.node(name='H', label='Hype', shape='oval', style='dashed')\ndot.edge(tail_name='H', head_name='D')\ndot.edge(tail_name='H', head_name='S')\nImage(dot.render(filename='../../images/dags/dags', format='png', cleanup=True))"
  },
  {
    "objectID": "notebooks/00-intro/00-20-causal-dags.html#conclusion-1",
    "href": "notebooks/00-intro/00-20-causal-dags.html#conclusion-1",
    "title": "Summary",
    "section": "Conclusion",
    "text": "Conclusion\nAs can be seen above, secondary market demand and supply, card gameplay impact, and market hype are all unobserved. This one reason financial markets are so hard to model.\nThe print quantity of a given card is proprietary information, with data on number of card sheet printings and booster pack composition not public data. We can infer this information by estimating card sheet composition, booster deck composition, and retail sales quantities.\nFinally, all of these factors vary as a function of time. Reprintings, hype, and value will change over time, as we well know. Even the card’s impact on gameplay will change as new sets are released and old ones are phased out of formats such as Standard.\nI will dive into this topic of estimating card value after exploring card impact in draft play."
  },
  {
    "objectID": "notebooks/00-intro/00-40-glossary.html",
    "href": "notebooks/00-intro/00-40-glossary.html",
    "title": "Summary",
    "section": "",
    "text": "A glossary of MTG and data science terms."
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html",
    "href": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html",
    "title": "Review AllPrintings Tables",
    "section": "",
    "text": "# Summary\nAn introduction to the MTGJSON card data, including reviewing the data files and column features."
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#introduction",
    "href": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#introduction",
    "title": "Review AllPrintings Tables",
    "section": "Introduction",
    "text": "Introduction\nI will use the data from MTGJSON. The AllPrintings card data comes in various formats, such as json, sql, csv, and parquet.\nI will use the parquet format, since that is the most performant format for data analysis. It has high compression, fast load times, and can query directly on disk. This minimizes both disk space and memory usage.\nI will also use the AllPrices data for economic analysis. This is only available in the json format."
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#downloads",
    "href": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#downloads",
    "title": "Review AllPrintings Tables",
    "section": "Downloads",
    "text": "Downloads\nSee notebook 01-10-get-data.ipynb to fetch the data."
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#card-files",
    "href": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#card-files",
    "title": "Review AllPrintings Tables",
    "section": "Card Files:",
    "text": "Card Files:\n\ncards.parquet: The primary file that contains card data, such as card name, mana cost, type, and text.\ntokens.parquet: Same for tokens.\ncardForeignData.parquet: Foreign language translations of cards.\ncardLegalities.parquet: Legality of cards for various play formats.\ncardPrices.parquet: Latest prices for cards on various platforms, including retail and buylist prices.\ncardPurchaseUrls.parquet: URLs to various retail platforms.\ncardRulings.parquet: The rulings for cards."
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#set-files",
    "href": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#set-files",
    "title": "Review AllPrintings Tables",
    "section": "Set Files:",
    "text": "Set Files:\n\nsets.parquet: Data on various released sets, such as set code (10E, OTJ…), set size, and release date.\nsetTranslations.parquet: Translations for set names in various languages."
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#identifier-files",
    "href": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#identifier-files",
    "title": "Review AllPrintings Tables",
    "section": "Identifier Files:",
    "text": "Identifier Files:\n\ncardIdentifiers.parquet: Identifiers for various MTG data platforms (TCG Collector, Scryfall, Cardmarket…).\ntokenIdentifiers.parquet: Same for tokens."
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#set-booster-files",
    "href": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#set-booster-files",
    "title": "Review AllPrintings Tables",
    "section": "Set Booster Files:",
    "text": "Set Booster Files:\n\nsetBoosterContents.parquet: For booster packs, different mixes of sheet composition (1 theList + 13 others versus 0 theList + 14 others).\nsetBoosterContentWeights.parquet: The weight of each booster mix (1 in 10 boosters has theList).\nsetBoosterSheets.parquet: Card sheet information.\nsetBoosterSheetCards.parquet: Card composition of each sheet, including counts."
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#meta-file",
    "href": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#meta-file",
    "title": "Review AllPrintings Tables",
    "section": "Meta File:",
    "text": "Meta File:\n\nmeta.parquet: Version and date for current MTGJSON build."
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#mtgjson",
    "href": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#mtgjson",
    "title": "Review AllPrintings Tables",
    "section": "MTGJSON",
    "text": "MTGJSON\n\nuuid:\n\nReprinted card editions: Unique id\nDouble-faced cards (DBC): Each face has a unique uuid.\nForeign languages: Same Id."
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#wotc-gatherer",
    "href": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#wotc-gatherer",
    "title": "Review AllPrintings Tables",
    "section": "WOTC Gatherer",
    "text": "WOTC Gatherer\n\nmultiverseId: The WOTC card identifier used their Gatherer card database.\n\nReprinted card editions: Unique id\nDouble-faced cards: Same id\nForeign languages: Different id"
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#scryfall",
    "href": "notebooks/01-mtgjson-data/01-00-mtgjson-data-intro.html#scryfall",
    "title": "Review AllPrintings Tables",
    "section": "Scryfall",
    "text": "Scryfall\n\nscryfallId: The Scryfall uuid. It has different rules than the MTGJSON uuid, such as faces of DFCs are not unique.\n\nReprinted card editions: Unique id\nDouble-faced cards: Same id. See scryfallCardBackId.\nForeign languages: Different id"
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-30-card-features-eda.html",
    "href": "notebooks/01-mtgjson-data/01-30-card-features-eda.html",
    "title": "Summary",
    "section": "",
    "text": "Exploratory data analysis of basic card features (e.g. power and toughness)"
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-30-card-features-eda.html#exploring-data-features",
    "href": "notebooks/01-mtgjson-data/01-30-card-features-eda.html#exploring-data-features",
    "title": "Summary",
    "section": "Exploring Data Features",
    "text": "Exploring Data Features\nHere I’ll explore the various data feature is the card data.\n\nIdentifier Features\n\nuuid:\nAlso see the cardIdentifiers.parquet file\n\n\n\nName Features\n\nasciiName: Name with only legal ASCII characters. Only populated if non-ASCII characters in name\nflavorName: Promotion name, with true name underneath, such as Cabal Coffers with the flavor name: Minas Morgul\nname: Name of the cards. Multi-faced cards include a // delimiter.\nnumber: Card number in the set\nsetCode: The set code a card is in\nAlso see the sets.parquet file for set data.\n\n\nASCII Name\nLook at the name and asciiName columns to see if there are any differences.\n\ndf.loc[df['asciiName'] == 'Nazgul', ['asciiName', 'name']].head(1)\n\n\n\n\n\n\n\n\nasciiName\nname\n\n\n\n\n41669\nNazgul\nNazgûl\n\n\n\n\n\n\n\n\n\nSet Code\nHere is the sets with the top 10 highest counts of uuids.\n\ncounts = df['setCode'].value_counts()\ncounts[:10]\n\nsetCode\nPLST    4853\nPRM     3200\nSLD     1612\nWHO     1186\nPIP     1076\nCMM     1068\nCLB      972\nLTR      856\nJ22      835\nPSAL     725\nName: count, dtype: int64\n\n\nA histogram of the set card counts. It is bimodal with a peak around 200 cards, and a peak around 10 cards.\n\nbins = counts.value_counts()\ng = sns.histplot(counts, bins=30, log_scale=[True, False], cbar=True)\ng.set(xlabel=\"Set Size\", ylabel=\"Number of Occurrences\", title=\"Set Size Distribution\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nCard Name\nSee how many occurrences of each name there are in the data set.\nThe five basic lands show up very frequently.\n\ncounts = df['name'].value_counts()\ncounts[:5]\n\nname\nForest      872\nSwamp       845\nIsland      835\nMountain    833\nPlains      810\nName: count, dtype: int64\n\n\nHere are the next 10 frequent cards, including Sol Ring and Swords to Plowshares\n\ncounts[5:16]\n\nname\nSol Ring                92\nSwords to Plowshares    85\nCommand Tower           78\nCounterspell            71\nEvolving Wilds          68\nSerra Angel             60\nTerramorphic Expanse    59\nLightning Bolt          58\nArcane Signet           58\nGiant Growth            57\nDisenchant              56\nName: count, dtype: int64\n\n\nPlotting out the histogram of card name frequency, we can see it follows the power-law. It is nearly linear on a log-log scale.\n\ng = sns.histplot(counts[5:], log_scale=[True, True], kde=True, kde_kws={\"bw_adjust\": 2})\ng.set(xlabel=\"Card Name Count\", ylabel=\"Number of Occurrences\", title=\"Card Name Count Distribution\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nPrimary Play Features\n\nkeywords: A list of keywords on the card\npower: The power of a creature card\nrarity: The rarity of the card\ntoughness: The toughness of a creature card\n\n\nKeywords\nGet count of all keywords in the data. There are 588 unique keywords. We can see flying takes the lead, with enchant and trample also being popular.\nWe’ll adjust the data to only look at one of each unique name and removing alterative art cards.\n\ndf_1st = df[df['isAlternative'] != True]\ndf_1st = df_1st.groupby('name').first()\n\n\ncounts = df_1st['keywords'].str.split(', ').explode().value_counts()\nprint(f\"Total Unique Keywords: {counts.count()}\")\nprint(f\"Keywords w/ &gt;250 Counts: {counts[counts&gt;250].count()}\")\nprint(f\"Keywords w/ &lt;10 Count: {counts[counts&lt;10].count()}\")\ncounts[:10]\n\nTotal Unique Keywords: 586\nKeywords w/ &gt;250 Counts: 18\nKeywords w/ &lt;10 Count: 349\n\n\nkeywords\nFlying          2746\nEnchant         1175\nTrample          816\nHaste            566\nVigilance        544\nEquip            494\nFlash            493\nMill             469\nScry             396\nFirst strike     349\nName: count, dtype: int64\n\n\nHere we see that most keywords are infrequent, with only 18 keywords appearing more than 250 times.\n\ncounts2 = counts[counts&gt;1]\ng = sns.histplot(counts2, bins=30, log_scale=True)\ng.set(xlabel=\"Keyword Count\", ylabel=\"Number of occurrences\", title=\"Keyword Count Distribution\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nRarity\nWe can see that for uuids, the rare is the most common type.\n\ncounts = df['rarity'].value_counts()\ncounts\n\nrarity\nrare        35408\ncommon      28389\nuncommon    23844\nmythic       8179\nspecial       387\nbonus           9\nName: count, dtype: int64\n\n\nWe clean this up by only selecting one instance of each name, and removing alterative art cards.\nThe number of cards per rarity is fairly uniform except for mythic which is much lower. Note that this is the number of uniquely named cards, not print frequency.\n\ncounts = df_1st['rarity'].value_counts()\ncounts\n\nrarity\ncommon      9941\nrare        9256\nuncommon    8657\nmythic      1788\nspecial        9\nName: count, dtype: int64\n\n\n\ng = sns.barplot(x=counts.index, y=counts.values, order=['common', 'uncommon', 'rare', 'mythic'])\ng.set(xlabel=\"Rarity\", ylabel=\"Number of Occurrences\", title=\"Rarity Distribution\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nPower & Toughness\n\ndef select_numeric(counts, col='power'):\n    counts = counts.reset_index()\n    mask = counts[col].apply(lambda x: x.isnumeric())\n    counts = counts[mask]\n    counts[col] = counts[col].astype(int)\n    counts.sort_values(col, inplace=True)\n    counts = counts[counts[col] &lt; 12]\n    counts['label'] = col\n    counts.rename(columns={col: 'value'}, inplace=True)\n    return counts\n\ndef count_values(df, col='power'):\n    counts = df[col].value_counts()\n    return select_numeric(counts, col=col)\n\ndef group(df, col1='power', col2='toughness'):\n    return pd.concat([count_values(df, col1), count_values(df, col2)])\n\ncounts = group(df_1st, col1='power', col2='toughness')\n\n\nsns.lineplot(data=counts, x='value', y='count', hue='label')\n\n&lt;Axes: xlabel='value', ylabel='count'&gt;\n\n\n\n\n\n\n\n\n\n\ndf_pl['power']\n\nname\n\"Ach! Hans, Run!\"                 None\n\"Brims\" Barone, Midway Mobster       5\n\"Lifetime\" Pass Holder               2\n\"Name Sticker\" Goblin                2\n\"Rumors of My Death . . .\"        None\n                                  ... \nÉomer, King of Rohan                 2\nÉomer, Marshal of Rohan              4\nÉowyn, Fearless Knight               3\nÉowyn, Lady of Rohan                 2\nÉowyn, Shieldmaiden                  5\nName: power, Length: 29651, dtype: object\n\n\n\ndf_pl = df_1st[['power', 'toughness']].copy()\ndf_pl.dropna(inplace=True)\ndf_pl['p_mask'] = df_pl['power'].apply(lambda x: x.isnumeric())\ndf_pl['t_mask'] = df_pl['toughness'].apply(lambda x: x.isnumeric())\ndf_pl = df_pl[df_pl['p_mask'] & df_pl['t_mask']]\ndf_pl['power'] = df_pl['power'].astype(int)\ndf_pl['toughness'] = df_pl['toughness'].astype(int)\nsns.histplot(data=df_pl, x='power', y='toughness')\n\n&lt;Axes: xlabel='power', ylabel='toughness'&gt;\n\n\n\n\n\n\n\n\n\n\n\n\nColor & Mana Features\n\ncolorIdentity\ncolorIndicator\ncolors\nmanaCost\nmanaValue\n\n\n\nCard Type Features\n\nsubsets\nsubtypes\nsupertypes\ntype\ntypes\n\n\n\nText Features\n\nflavorText:\nhasContentWarning: Cards that have sensitive content. See this article for more.\nlanguage: The language the text is written in.\nisFunny: Is a funny card, like in ‘Un-sets’\nisStorySpotlight: A Story Spotlight card. Marked as “Story Spotlight” with sequence number in lower border.\nisTextless: The card does not have a textbox\ntext: The rules text in the textbox.\nAlso see the cardRulings.parquet file for ruling text\nAlso see the cardForeignData.parquet file foreign language translations\n\n\n\nSpecial Play Features\n\nattractionLights: List of attraction lights found on cards, such as Unfinity attraction ride cards\ndefense: Used by Battle - Siege type cards, such as Invasion of Gobakhan // Lightshield Array\nhand: Adjusts starting hand value. Used by Vanguard type cards.\nhasAlternativeDeckLimit: Allows for more than 4 copies in a deck\nleadershipSkills: Legality of a card to be a commander in various formats\nloyalty: Used by planeswalkers\nlife: Adjusts starting life value. Used by Vanguard type cards.\nrelatedCards: A list of card names associated to a card, such as Sword of Dungeons & Dragons and Dragon\n\n\n\nCard Layout Variant Features\n\ncardParts: List of multiple card parts for meld layouts, such as Brisela, Voice of Nightmares + Bruna, the Fading Light // Brisela, Voice of Nightmares\nfaceConvertedManaCost\nfaceFlavorName\nfaceManaValue\nfaceName\nlayout: Non-standard card layouts, such as split, flip, or transform\notherFaceIds: uuid of other faces of the card, such as double-faced cards.\nside: Identifier on side of card for given face, such as a or b\n\n\n\nPerformance Features\n\nedhrecRank\nedhrecSaltiness\n\n\n\nLegal Features\n\nAlso see the cardLegalities.parquet file for format legalities\n\n\n\nVisual & Collector Features\n\nartist\nartistIds\nborderColor: Boarder color of card, such as black, white, or silver\nfinishes: Card finish, such as foil, non-foil, or etched\nframeEffects: Non-standard effects, such as etched or extended art\nframeVersion: Version of frame such as 1993 or 2015\nhasFoil\nhasNonFoil\nisAlternative\nisFullArt\nisOversized\nisTimeshifted: Timeshifted is a current card with a retro frame.\nsignature\nvariations: uuids of other cards that are alternate printings of the card in the same set.\nwatermark: Name of watermark on the card\n\n\n\nPrinting Features\n\navailability: A lest of card’s available printing types, such as paper, arena, etc.\nisOnlineOnly\nisPromo\nisRebalanced\nisReprint\nisReserved\nprintings\npromoTypes\nrebalancedPrintings\nsecurityStamp: Security stamp, such as acorn, heart, etc.\n\n\n\nOriginal Printing Features\n\noriginalPrintings: uuids of original printings if its different than the original, such as rebalanced cards.\noriginalReleaseDate: If release date was different than the set release date.\noriginalText\noriginalType\n\n\n\nProducts Features\n\nboosterTypes: List of booster types. Default is a random booster, versus deck boosters which are deterministic.\nduelDeck: Indicates which deck (‘a’ vs ‘b’) a card is in Dual Decks\nisStarter: Is card in a starter deck product.\nsourceProducts: uuids of associated sealed products where card can be found.\nAlso see the cardPrices.parquet file for card prices.\nAlso see the cardPurchaseUrls.parquet file for card purchase URLs.\nAlso see the setBoosterContents.parquet and related files for booster pack data.\n\n\nmask = df['name'] == 'Boom // Bust'\nmask &= df['uuid'] == '7104f01e-0ca6-53e6-873f-ee246015174a'\ndf.loc[mask, ['faceName', 'name', 'language', 'multiverseId', 'identifiers', 'uuid']].head()\n\n\n---------------------------------------------------------------------------\n\nKeyError                                  Traceback (most recent call last)\n\nCell In[10], line 3\n\n      1 mask = df['name'] == 'Boom // Bust'\n\n      2 mask &= df['uuid'] == '7104f01e-0ca6-53e6-873f-ee246015174a'\n\n----&gt; 3 df.loc[mask, ['faceName', 'name', 'language', 'multiverseId', 'identifiers', 'uuid']].head()\n\n\n\nFile c:\\Users\\Josh.Meehl\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pandas\\core\\indexing.py:1147, in _LocationIndexer.__getitem__(self, key)\n\n   1145     if self._is_scalar_access(key):\n\n   1146         return self.obj._get_value(*key, takeable=self._takeable)\n\n-&gt; 1147     return self._getitem_tuple(key)\n\n   1148 else:\n\n   1149     # we by definition only have the 0th axis\n\n   1150     axis = self.axis or 0\n\n\n\nFile c:\\Users\\Josh.Meehl\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pandas\\core\\indexing.py:1339, in _LocIndexer._getitem_tuple(self, tup)\n\n   1336 if self._multi_take_opportunity(tup):\n\n   1337     return self._multi_take(tup)\n\n-&gt; 1339 return self._getitem_tuple_same_dim(tup)\n\n\n\nFile c:\\Users\\Josh.Meehl\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pandas\\core\\indexing.py:994, in _LocationIndexer._getitem_tuple_same_dim(self, tup)\n\n    991 if com.is_null_slice(key):\n\n    992     continue\n\n--&gt; 994 retval = getattr(retval, self.name)._getitem_axis(key, axis=i)\n\n    995 # We should never have retval.ndim &lt; self.ndim, as that should\n\n    996 #  be handled by the _getitem_lowerdim call above.\n\n    997 assert retval.ndim == self.ndim\n\n\n\nFile c:\\Users\\Josh.Meehl\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pandas\\core\\indexing.py:1382, in _LocIndexer._getitem_axis(self, key, axis)\n\n   1379     if hasattr(key, \"ndim\") and key.ndim &gt; 1:\n\n   1380         raise ValueError(\"Cannot index with multidimensional key\")\n\n-&gt; 1382     return self._getitem_iterable(key, axis=axis)\n\n   1384 # nested tuple slicing\n\n   1385 if is_nested_tuple(key, labels):\n\n\n\nFile c:\\Users\\Josh.Meehl\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pandas\\core\\indexing.py:1322, in _LocIndexer._getitem_iterable(self, key, axis)\n\n   1319 self._validate_key(key, axis)\n\n   1321 # A collection of keys\n\n-&gt; 1322 keyarr, indexer = self._get_listlike_indexer(key, axis)\n\n   1323 return self.obj._reindex_with_indexers(\n\n   1324     {axis: [keyarr, indexer]}, copy=True, allow_dups=True\n\n   1325 )\n\n\n\nFile c:\\Users\\Josh.Meehl\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pandas\\core\\indexing.py:1520, in _LocIndexer._get_listlike_indexer(self, key, axis)\n\n   1517 ax = self.obj._get_axis(axis)\n\n   1518 axis_name = self.obj._get_axis_name(axis)\n\n-&gt; 1520 keyarr, indexer = ax._get_indexer_strict(key, axis_name)\n\n   1522 return keyarr, indexer\n\n\n\nFile c:\\Users\\Josh.Meehl\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pandas\\core\\indexes\\base.py:6114, in Index._get_indexer_strict(self, key, axis_name)\n\n   6111 else:\n\n   6112     keyarr, indexer, new_indexer = self._reindex_non_unique(keyarr)\n\n-&gt; 6114 self._raise_if_missing(keyarr, indexer, axis_name)\n\n   6116 keyarr = self.take(indexer)\n\n   6117 if isinstance(key, Index):\n\n   6118     # GH 42790 - Preserve name from an Index\n\n\n\nFile c:\\Users\\Josh.Meehl\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pandas\\core\\indexes\\base.py:6178, in Index._raise_if_missing(self, key, indexer, axis_name)\n\n   6175     raise KeyError(f\"None of [{key}] are in the [{axis_name}]\")\n\n   6177 not_found = list(ensure_index(key)[missing_mask.nonzero()[0]].unique())\n\n-&gt; 6178 raise KeyError(f\"{not_found} not in index\")\n\n\n\nKeyError: \"['multiverseId', 'identifiers'] not in index\"\n\n\n\nHere we can see that each printing of the Boom // Bust card has a common multiverseId and unique uuid across the Boom and Bust faces.\n\nmask = df['name'] == 'Boom // Bust'\nmask &= df['multiverseId'] == 140480.0\ndf.loc[mask, ['faceName', 'name', 'language', 'multiverseId', 'identifiers', 'uuid']].head()\n\n\n\n\n\n\n\n\nfaceName\nname\nlanguage\nmultiverseId\nidentifiers\nuuid\n\n\n\n\n285143\nBoom\nBoom // Bust\nGerman\n140480.0\n{\"multiverseId\": 140480, \"scryfallId\": \"303895...\n7104f01e-0ca6-53e6-873f-ee246015174a\n\n\n285151\nBust\nBoom // Bust\nGerman\n140480.0\n{\"multiverseId\": 140480, \"scryfallId\": \"303895...\n94a1683f-deed-5731-bc0a-894075b3fdb2\n\n\n\n\n\n\n\nMost cards are printed in 10 languages beyond english.\n\ndf['uuid'].value_counts().value_counts()\n\ncount\n10    13194\n6      9757\n7      8048\n8      5111\n5      4187\n4      3679\n9      3237\n3      3082\n1      3009\n2      2629\nName: count, dtype: int64\n\n\nIt appears that Phyrexian is not compatible with the UTF-8 character encoding!\n\ndf.loc[df['language'] == 'Phyrexian', 'text'].head()\n\n116703    |zvEZYCsDFhg.\\n|besYf,GvEng,mpreLYv co,LFr2aho...\n116704    |pcEnusL.\\n+Ⅰ: |co,tuhtZFsDYt,DEEtAGvEnyg,hruP...\n157935    |zvEpnrYhm.\\n|su,Lecc,CF,CsYPYcs,usFPuuDs²\\\\²M...\n162944                                                 None\n169505    |zvEhiUIpenDk zvE&EhclYvh.\\n|beCEcs,FgCnUCA Fg...\nName: text, dtype: object"
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-30-card-features-eda.html#identifiers",
    "href": "notebooks/01-mtgjson-data/01-30-card-features-eda.html#identifiers",
    "title": "Summary",
    "section": "Identifiers",
    "text": "Identifiers\nThe cardIdentifiers.parquet file contains the Identifiers. These are used to map the MTGJSON card to other platforms, such as TCG Player or MTG Arena.\nThe other platforms are:\n- Card Kingdom: A large-scale card vender - Card Sphere: A card trading marketplace - Cardmarket: A card marketplace - MTG Arena: An online environment to play MTG - MTG Online: An online environment to play MTG - WOTC Gather: WOTC’s official data source. - Scryfall: Another MTG data source. Note DFC do not have unique UUIDs. - TGC Player: A card marketplace\nA note on the uuids. The foil and non-foil versions of a card have unique uuids. To cross-reference the other foil type, use the mtgjsonFoilVersionId and mtgjsonNonFoilVersionId fields.\n\nfile = files[1]\ndf = load_by_filename(file)\ndf.loc[2]\n\nOpening cardIdentifiers.parquet\nLoaded DF of shape: (96203, 21)\n\n\ncardKingdomEtchedId                                         None\ncardKingdomFoilId                                           None\ncardKingdomId                                             122720\ncardsphereFoilId                                              21\ncardsphereId                                                  22\nmcmId                                                      16166\nmcmMetaId                                                    176\nmtgArenaId                                                  None\nmtgjsonFoilVersionId        8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a\nmtgjsonNonFoilVersionId                                     None\nmtgjsonV4Id                 9eb2e54c-a12b-5e88-a9c0-d8c84c52d59c\nmtgoFoilId                                                 26993\nmtgoId                                                     26992\nmultiverseId                                              129465\nscryfallCardBackId          0aeebaf5-8c7d-4636-9e82-8c27447861f7\nscryfallId                  8f7980d4-da43-4d6d-ad16-14b8a34ae91d\nscryfallIllustrationId      e4d6c53f-e936-4be8-8b70-47c2be863b20\nscryfallOracleId            a2daaf32-dbfe-4618-892e-0da24f63a44a\ntcgplayerEtchedProductId                                    None\ntcgplayerProductId                                         15033\nuuid                        57aaebc1-850c-503d-9f6e-bb8d00d8bf7c\nName: 2, dtype: object\n\n\n\nuuids = ['57aaebc1-850c-503d-9f6e-bb8d00d8bf7c', '8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a']\nmask = df['uuid'].isin(uuids)\ndf.loc[mask, ['mtgjsonFoilVersionId', 'mtgjsonNonFoilVersionId', 'uuid']]\n\n\n\n\n\n\n\n\nmtgjsonFoilVersionId\nmtgjsonNonFoilVersionId\nuuid\n\n\n\n\n2\n8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a\nNone\n57aaebc1-850c-503d-9f6e-bb8d00d8bf7c\n\n\n3\nNone\n57aaebc1-850c-503d-9f6e-bb8d00d8bf7c\n8fd4e2eb-3eb4-50ea-856b-ef638fa47f8a"
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-30-card-features-eda.html#boosters",
    "href": "notebooks/01-mtgjson-data/01-30-card-features-eda.html#boosters",
    "title": "Summary",
    "section": "Boosters",
    "text": "Boosters\ndf = load_by_filename(“setBoosterContents.parquet”) mask = df[‘setCode’] == ‘OTJ’ mask &= df[‘boosterName’] == ‘play’ mask &= df[‘sheetName’] == ‘breakingNews’ df.loc[mask].head(50)\ndf = load_by_filename(“setBoosterContentWeights.parquet”) mask = df[‘setCode’] == ‘OTJ’ mask &= df[‘boosterName’] == ‘play’ df.loc[mask].head(50)\ndf = load_by_filename(“setBoosterSheets.parquet”) mask = df[‘setCode’] == ‘OTJ’ mask &= df[‘boosterName’] == ‘collector’ df.loc[mask].head(50)\ndf = load_by_filename(“setBoosterSheetCards.parquet”) mask = df[‘setCode’] == ‘OTJ’ mask &= df[‘boosterName’] == ‘play’ mask &= df[‘sheetName’] == ‘breakingNews’ df.loc[mask].head(50)"
  },
  {
    "objectID": "notebooks/01-mtgjson-data/01-10-get-data.html",
    "href": "notebooks/01-mtgjson-data/01-10-get-data.html",
    "title": "Summary",
    "section": "",
    "text": "The code to acquire and pre-process the card data to use for future analysis.\n\nGrab MTGJSON Card Data\nHere I will download and clean the data for MTG cards.\nFirst we will download the data from MTGJSON. The AllPrintings card data comes in various formats, such as json, sql, csv, and parquet.\nI will use the parquet format, since that is the most performant format for data analysis. It has high compression, fast load times, and can query directly on disk. This minimizes both disk space and memory usage.\nData URLs: - Linux: https://mtgjson.com/api/v5/AllPrintingsParquetFiles.tar.gz - Windows: https://mtgjson.com/api/v5/AllPrintingsParquetFiles.zip\nThe following code downloads and decompresses the data.\n\n# Setup Notebook\nimport os\nif os.path.basename(os.getcwd()) != 'mtg-modeling':\n    get_ipython().run_line_magic(\"run\", '-i \"../../scripts/notebook_header.py\"') # type: ignore\n\n\nfrom src.data.mtgjson_fetcher import MtgJsonFetcher\n\n\ncard_fetcher = MtgJsonFetcher(dataset='AllPrintingsParquetFiles', save_root='data/raw/mtgjson')\ncard_fetcher.fetch()\n\nDownloading AllPrintingsParquetFiles Data\nStarting datetime: 2024-08-24 20:29:54.591346\n\n\n--2024-08-24 20:29:54--  https://mtgjson.com/api/v5/AllPrintingsParquetFiles.tar.gz\nResolving mtgjson.com (mtgjson.com)... 104.21.64.186, 172.67.154.80\nConnecting to mtgjson.com (mtgjson.com)|104.21.64.186|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 120607387 (115M) [application/octet-stream]\nSaving to: ‘data/raw/mtgjson/AllPrintingsParquetFiles.tar.gz’\n\n     0K ........ ........ ........ ........ 27% 2.92M 28s\n 32768K ........ ........ ........ ........ 55% 2.80M 18s\n 65536K ........ ........ ........ ........ 83% 2.97M 7s\n 98304K ........ ........ ...              100% 2.95M=40s\n\n2024-08-24 20:30:34 (2.90 MB/s) - ‘data/raw/mtgjson/AllPrintingsParquetFiles.tar.gz’ saved [120607387/120607387]\n\n\n\n1.1G    data/raw/mtgjson\nDownloaded AllPrintingsParquetFiles Data\nFinal size: 0\nFinal path: data/raw/mtgjson/AllPrintingsParquetFiles\nFinished datetime: 2024-08-24 20:30:35.446599\n\n\n\n\nGrab MTGJSON All Price Data\nNext we will download the data from MTGJSON. The AllPrices card data only comes in json format. We will have to convert this to parquet for ease of use in future analysis.\nNote this data only covers the previous 90 days.\nSince the file is very large, I will use polars instead of pandas\nData URLs: - Linux: https://mtgjson.com/api/v5/AllPrices.json.gz - Windows: https://mtgjson.com/api/v5/AllPrices.json.zip\nThe following code downloads and decompresses the data.\n\nprice_fetcher = MtgJsonFetcher(dataset='AllPrices.json', save_root='data/raw/mtgjson')\nprice_fetcher.fetch()\n\nDownloading AllPrices.json Data\nStarting datetime: 2024-08-24 20:30:35.455416\n\n\n--2024-08-24 20:30:35--  https://mtgjson.com/api/v5/AllPrices.json.gz\nResolving mtgjson.com (mtgjson.com)... 104.21.64.186, 172.67.154.80\nConnecting to mtgjson.com (mtgjson.com)|104.21.64.186|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 106343489 (101M) [application/octet-stream]\nSaving to: ‘data/raw/mtgjson/AllPrices.json.gz’\n\n     0K ........ ........ ........ ........ 31% 3.00M 23s\n 32768K ........ ........ ........ ........ 63% 3.01M 12s\n 65536K ........ ........ ........ ........ 94% 2.96M 2s\n 98304K .....                              100% 3.17M=34s\n\n2024-08-24 20:31:09 (3.00 MB/s) - ‘data/raw/mtgjson/AllPrices.json.gz’ saved [106343489/106343489]\n\n\n\n1.1G    data/raw/mtgjson\nDownloaded AllPrices.json Data\nFinal size: 0\nFinal path: data/raw/mtgjson/AllPrices\nFinished datetime: 2024-08-24 20:31:12.933750"
  },
  {
    "objectID": "notebooks/02-draft-data/02-00-draft-data-intro.html",
    "href": "notebooks/02-draft-data/02-00-draft-data-intro.html",
    "title": "Summary",
    "section": "",
    "text": "An introduction to the 17lands draft gameplay data, including reviewing the data files and column features."
  },
  {
    "objectID": "notebooks/02-draft-data/02-00-draft-data-intro.html#data-source",
    "href": "notebooks/02-draft-data/02-00-draft-data-intro.html#data-source",
    "title": "Summary",
    "section": "Data Source",
    "text": "Data Source\n17Lands offers public datasets for download. The data is available in CSV format. The newest sets are updated regularly for a few months after initial set release."
  },
  {
    "objectID": "notebooks/02-draft-data/02-00-draft-data-intro.html#data-files",
    "href": "notebooks/02-draft-data/02-00-draft-data-intro.html#data-files",
    "title": "Summary",
    "section": "Data Files",
    "text": "Data Files\nThere are 3 files types available.\n- DraftData: Data related to the draft pool and picks. - GameData: Data related to game play and outcomes. - ReplayData: Detailed data related to player actions in game play."
  },
  {
    "objectID": "notebooks/02-draft-data/02-00-draft-data-intro.html#game-formats",
    "href": "notebooks/02-draft-data/02-00-draft-data-intro.html#game-formats",
    "title": "Summary",
    "section": "Game Formats",
    "text": "Game Formats\nThe game formats can be Draft or Sealed. - Draft: A set of 8 players open a shared pool of packs and select cards to build a deck. - Sealed: A player opens a set of packs and selects cards to build a deck.\nThe tournament types can be Traditional or Premier. - Traditional: A best of 3 match with sideboarding. - Premier: A best of 1 match."
  },
  {
    "objectID": "notebooks/02-draft-data/02-00-draft-data-intro.html#terms",
    "href": "notebooks/02-draft-data/02-00-draft-data-intro.html#terms",
    "title": "Summary",
    "section": "Terms",
    "text": "Terms\nThe following terms are used in the data set: - game: a single game of MTG - match: a series of games between two players. Typically best of 1 or best of 3. - draft: an initial draft event, followed by a series of matches between a group of players. - build: a instance of a deck in a draft. Can be adjusted between games."
  },
  {
    "objectID": "notebooks/02-draft-data/02-10-get-draft-data.html",
    "href": "notebooks/02-draft-data/02-10-get-draft-data.html",
    "title": "Summary",
    "section": "",
    "text": "The code to acquire and pre-process the data to use for future analysis.\n\n# Setup Notebook\nimport os\nif os.path.basename(os.getcwd()) != 'mtg-modeling':\n    get_ipython().run_line_magic(\"run\", '-i \"../../scripts/notebook_header.py\"') # type: ignore\n\nChanged working directory to: d:\\mtg-modeling\n\n\n\nimport requests\nimport gzip\nimport shutil\nimport itertools\n\n\nset_codes = ['OTJ', 'BLB']\ndraft_formats = ['PremierDraft', 'TradDraft', 'Sealed', 'TradSealed'] \ndata_types = ['draft_data', 'game_data'] # omit 'replay_data' due to large size\n\n\n\nfor set_code, draft_format, data_type in itertools.product(set_codes, draft_formats, data_types):\n    print(f\"Downloading {set_code} {draft_format} {data_type} Data...\")\n    save_path = Path(f\"data/raw/17lands/{data_type}/{draft_format}\")\n    gz_file = f\"{data_type}_public.{set_code}.{draft_format}.csv.gz\"\n    csv_file = f\"{data_type}_public.{set_code}.{draft_format}.csv\"\n    url = f\"https://17lands-public.s3.amazonaws.com/analysis_data/{data_type}/{gz_file}\"\n    os.makedirs(save_path, exist_ok=True)\n\n    # Download File\n    response = requests.get(url, stream=True)\n    if response.status_code != 200:\n        print(f\"Failed to download {set_code} {draft_format} {data_type} data from {url}.\")\n        continue\n    with open(save_path / gz_file, 'wb') as file:\n        file.write(response.content)\n\n    # Unzip File\n    with gzip.open(save_path / gz_file, 'rb') as f_in:\n        with open(save_path / csv_file, 'wb') as f_out:\n            shutil.copyfileobj(f_in, f_out)\n\n    os.remove(save_path / gz_file)\nprint(\"Done!\")\n\nDownloading OTJ PremierDraft Data...\nDownloading OTJ PremierDraft Data...\nDownloading OTJ TradDraft Data...\nDownloading OTJ TradDraft Data...\nDownloading OTJ Sealed Data...\nFailed to download OTJ Sealed data from https://17lands-public.s3.amazonaws.com/analysis_data/draft_data/draft_data_public.OTJ.Sealed.csv.gz.\nDownloading OTJ Sealed Data...\nDownloading OTJ TradSealed Data...\nFailed to download OTJ TradSealed data from https://17lands-public.s3.amazonaws.com/analysis_data/draft_data/draft_data_public.OTJ.TradSealed.csv.gz.\nDownloading OTJ TradSealed Data...\nDownloading BLB PremierDraft Data...\nDownloading BLB PremierDraft Data...\nDownloading BLB TradDraft Data...\nDownloading BLB TradDraft Data...\nDownloading BLB Sealed Data...\nFailed to download BLB Sealed data from https://17lands-public.s3.amazonaws.com/analysis_data/draft_data/draft_data_public.BLB.Sealed.csv.gz.\nDownloading BLB Sealed Data...\nDownloading BLB TradSealed Data...\nFailed to download BLB TradSealed data from https://17lands-public.s3.amazonaws.com/analysis_data/draft_data/draft_data_public.BLB.TradSealed.csv.gz.\nDownloading BLB TradSealed Data...\nDone!"
  },
  {
    "objectID": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html",
    "href": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html",
    "title": "Bloomburrow (BLB) Arena Draft Analysis",
    "section": "",
    "text": "Exploratory data analysis of draft data (e.g. win rates)"
  },
  {
    "objectID": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#color-decks",
    "href": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#color-decks",
    "title": "Bloomburrow (BLB) Arena Draft Analysis",
    "section": "4.1 Color Decks",
    "text": "4.1 Color Decks\nLet’s explore the color decks.\n\n4.1.1 Color Frequency\nFirst I will look at the number of decks drafted for each color set. The 10 two-color decks are the most frequent. The Bloomburrow set is design for 10 two-color animal tribes, so this aligns with the design intent of the set. Mono-color and multi-color decks are much lest frequent.\nThe Black-Green Squirrels: Forage decks and the White-Green Rabbits: Go-Wide decks are by far the most popular. Most decks using Blue are much less favored.\nSee Figure 1\n\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis\n\n\n\n\n\nSince Bloomburrow is designed with 2-color tribal decks in mind, I will focus on these pairings. The most frequent drafted decks are Black-Green, White-Green, and Red-White. The least drafted are Blue-Black, Blue-Red and White-Blue.\n\n\n\n\n\n\n\n\n\nNext let’s look at the color composition of the decks. Below we can see that Green is the most frequently drafted color, with Black and White also favored. Red and Blue are much less frequent.\nThe average draft use rate per component color is 40.0%.\n\n\n\n\n\n\n\n\n\nDeck use over time\n…\n\n\n\n\n\n\n\n\n\n\n\n4.1.2 Color Win Rates\nIn addition to the use rate of the colors, I will also look at the win rates of the colors. First I calculate the weighted average win rate of 54.7%. As we saw in the summary section, this indicates that the 17Lands player base has a higher win rate than the general draft player base.\nBelow is a chart of the win rate for each color combination. There are some mono-color decks with high win rates, but have very low use rates, so the results may be circumstantial with a small sample size.\n\n\nAverage Win Percentage: 54.71%\n\n\n\n\n\n\n\n\n\n\n\nFocusing on the 2-color decks, the Black-Red Lizards: Opponents Lose Life is the highest win rate, but with a fairly low use rate. The White-Red Rabbits: Go-Wide and Black-Green Squirrels: Forage are the most popular decks and have high win rates.\n\n\n\n\n\n\n\n\n\nHere is the win rates for the five primary colors, based on if they are a main color in a deck. For example, the “B” results below are for Black win rates in decks suck as WB, BG, B, and UBR.\nThe average win rate for the data is 54.7%. The decks with Black perform the best, with a 55.2% win rate. Decks with Green and White also perform well, with 55.0% and 54.8% respectively. The decks with Red and Blue under-perform, with 53.8% and 53.2% win rate each.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.1.3 Color Freq vs Win Rate\nLet us now compare the use rate versus the win rate. If the player base is well calibrated to the win rate with their selections.\nBelow we can see that most of the two-color decks fall in a straight line, with two outliers. The Blue-Red Otters: Non-creature Spells deck under-performs relative to its use rate. On the other hand, the Black-Red Lizards: Opponents Lose Life deck is a sleeper, with the highest win rates, but selected less than the average two-color deck. The reason for this under-selection is that Red doesn’t perform well in general, so many drafters probably avoid drafting Red unless they get strong Black-Red cards early. White, Green, and Black are perform well, so the BG, WG, and WB decks are easy to pivot among in the draft."
  },
  {
    "objectID": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#opposing-player-colors",
    "href": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#opposing-player-colors",
    "title": "Bloomburrow (BLB) Arena Draft Analysis",
    "section": "4.2 Opposing Player Colors",
    "text": "4.2 Opposing Player Colors\nWe have data on the opposing player colors. This is useful to understand the meta of the draft.\nFor a given draft color combination, we can see the use rate by 17Lands players versus the use rate opponents. Each draft color combination is also color coded if the win rate is above or below the 17Lands player base average win rate. A diagonal grey line is also added to show parity between the use by the 17Lands players and the general player base.\nIn the chart blow looks at 2-color drafts. We can see that WG, BG, and UG are more favored by the 17Lands players and also has a higher win rate. The UB color deck is more favored, but has a much lower win rate. The other color pairs are on parity between the two player bases.\n\n\n\n\n\n\n\n\n\nLooking at the non-2-color drafts, we see that the 17Lands players are much less likely to pick any color companion that is not a 2-color deck. The win rates are also lower for these decks, which some exceptions being the White, Green, and Black decks.\nBased on this, it appears that if a drafter is selecting mono White, Green, or Black, they are better staying mono than drafting a 2-color deck into Blue or Red. However, since the mono decks are so infrequent, the strong deck performance may be circumstantial to certain cards combinations and not generalize across the entire color set.\n\n\n\n\n\n\n\n\n\n\n4.2.1 Matrix 2-Color vs 2-Color\nLet’s now see how each pairing of the two-color decks compare. This will give us insight into strengths and weaknesses of individual decks.\nFirst we will look at the number of games played between each pairing. The rows and columns are sorted based on the maximum frequency of player deck pairings, with BG vs WG the most frequent, followed by WG vs WG. The average number of games played between each pairing was 5,031.\nAs we saw above, the players use BG, WG, and UG more often than opponents, with the other color pairs being used at near parity.\n\n\n\n\n\n\n\n\n\nNext we look at the pair-wise win rates for players.\nThe most interesting observation is that the 17Lands player base is strong in most matchups, with a large exception for the UR deck. On average, the UR matchups under-perform by ~4 percentage points versus similar matchups. The UR-UR matchup is extremely low, and is the only like-paired matchup that has lower than even odds of winning."
  },
  {
    "objectID": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#player-rank",
    "href": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#player-rank",
    "title": "Bloomburrow (BLB) Arena Draft Analysis",
    "section": "4.3 Player Rank",
    "text": "4.3 Player Rank\nTo get a sense of player skill, below I plotted the number of wins by the player rank. I do not have player IDs, so I cannot track individual player performance. However, we can see the average performance of the player base. I also cannot track the number of drafts per player, so more frequent players will be over-represented.\nWhile we do not have opponent rankings, we can infer that most opponents will be of the same rank as the player. This is because the Arena draft system matches players with similar records. Each ranked season is about 1 month long. Ranks have “rank decay” between seasons, meaning an the start of the next season, a players rank will be lower than the previous season, requiring them to play more games to get back to their previous rank.\nSo our snapshot of each rank is a mix of lower-skill, end-of-season players at their peak, and higher-skill, start-of-season players who are climbing back up the ranks.\nBelow we see that most drafts are played by players in the Platinum ranks.\n\n\n\n\n\n\n\n\n\nHere we see that the win rates vary by rank. The higher ranks have higher win rates. Bronze has by far the lowest win rate, indicating new or unskilled players. The Silver rank has the highest win rate. This may be from the large number of Gold and Platinum players that reset to Silver at the start of the season and quickly climb back up the ranks.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBelow is a view for the number of games played per draft for each rank. While not identical, the pattern is very similar to the above chart of win rate.\n\n\n\n\n\n\n\n\n\n\n4.3.1 Ranks over Time\nWe next look at the number of drafts played for each rank over the dataset. Since the BLB set was released two days before the season start, I have truncated the data at 08-01 to avoid the rank decay.\nThe first few days are chaotic, as the BLB set released on 07-30, but with 07-31 being the first full day with games recorded. 08-01 was when the next ranked season started, resulting in rank decay, which is especially pronounced in Mythic and Diamond gameplay.\nAn interesting pattern is seen starting on 08-01, with Gold quickly decaying after the initial peak of 3800 drafts per day. The Platinum rank having a quick peak during days 4-6, then dropping.\nThe Diamond rank has a slow climb with a plateau during days 8-13 and then slowly retracing.\nThe Mythic rank starts at zero, then very slowly climbs te a peak of 500 drafts per day peak at 13-16 days.\nFrom this chart, we can’t tell how much of the decline at each ranks is due to player advancement, and how much is loss of interest after the initial excitement of a new season. In the following charts, I will normalize to the total drafts played to better account for overall decrease in gameplay.\n\n\nTotal Time Interval: 19 days 00:00:00\n\n\n\n\n\n\n\n\n\n\n\nHere we can see the numbers of drafts played. It is interesting that since both the release of BLB and the start of the new season coincided, the player interest in draft was very high with a peak of 11,300 drafts played on 07-31. The rate of play decayed over the weeks, with the minimum recorded of 3,100 occurring on 08-17.\nThe decline is nearly monotonic, with slight upticks occurring on the Saturdays of 08-04 and 08-11. This shows that the weekly seasonality is of minor effect.\nIt is interesting how releasing new sets increases player engagement. The introduction of the new season on 08-01 doesn’t seem to have caused an uptick in play, but this is a weak inference.\nFrom this data, I understand the economic motivation for releasing new sets for digital engagement on Arena. One could infer that paper play would follow a similar pattern, with draft play consuming many more booster packs a few weeks after a launch of a new set.\nIt would be interesting to compare this curve across set releases to get an indication of set-by-set preferences of the player base.\n\n\n\n\n\n\n\n\n\nNext we normalize for the total games played to see relative ranked play across the player base.\nWe can now see the relative rank play much more clearly.\nAfter the new season start, Gold shows a linear decay as the player base advances to Platinum.\nThe Platinum has a much more prolonged plateau, showing an equilibrium of new players joining the rank versus existing players advancing.\nBoth Diamond and Mythic start with minimal players, but gradually increase in play nearly monotonically at differing rates.\n\n\n\n\n\n\n\n\n\n\n\n4.3.2 Low vs High Rank Players\nNow let’s compare the performance of player rank versus success. I will take the 3 two-color decks that were outliers in the previous use-rate versus win-rate chart. I’ll use the BG deck with a high use and win rate, the BR deck with a high win rate and lower use rate, and the UR deck, with the very low use rate and an extremely low win rate.\nBelow we can see the overall performance of players with these decks. We have two categories. The first is the week of play and the second is the if the player is in the elite ranks of Diamond or Mythic.\nFor BG, the most played deck, the performance across weeks and ranks shows no clear trend.\nHowever, the BR and UR decks, which are less played, both sets of ranked players showed noticeable gains in win rate from week one to two. This indicates that the 17Lands player base learned how to better use these less favorable decks, regardless of rank.\nNote that for the first week of play, the Mythic and Diamond play base is very small."
  },
  {
    "objectID": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#mulligans",
    "href": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#mulligans",
    "title": "Bloomburrow (BLB) Arena Draft Analysis",
    "section": "5.1 Mulligans",
    "text": "5.1 Mulligans\n\n\n\n\n\n\n\n\n\nfirst_game\nlast_game\nmax_games\nwin_rate\nstart_rate\nn_games\nn_mul\nn_opp_mul\nmean_turns\nmax_turns\nmin_turns\nn_drafts\nn_matches\nmean_matches\nn_games_per_draft\nn_cards\nmax_card\nmean_land\nmax_land\nmin_land\n\n\n\n\n0\n2024-07-30 15:41:04\n2024-08-18 23:59:52\n2\n0.547108\n0.500285\n679966\n92172\n96719\n8.88899\n33\n1\n116804\n680693\n5.827651\n5.821427\n276\n7\n22.164273\n37\n11\n\n\n\n\n\n\n\n\n\n(679966, 20)\n\n\n\n\n\nshape: (5, 21)\n\n\n\nexpansion\nevent_type\ndraft_id\ndraft_time\ngame_time\nbuild_index\nmatch_number\ngame_number\nrank\nopp_rank\nmain_colors\nsplash_colors\non_play\nnum_mulligans\nopp_num_mulligans\nopp_colors\nnum_turns\nwon\nuser_n_games_bucket\nuser_game_win_rate_bucket\npoisson_samples\n\n\nstr\nstr\nstr\ndatetime[μs]\ndatetime[μs]\ni64\ni64\ni64\nstr\nstr\nstr\nstr\nbool\ni64\ni64\nstr\ni64\nbool\ni64\nf64\ni64\n\n\n\n\n\"BLB\"\n\"PremierDraft\"\n\"deaa4cdcd3e84d8e8b5a0ea34a0f9d…\n2024-07-30 22:30:39\n2024-07-30 22:58:45\n0\n1\n1\n\"gold\"\n\"None\"\n\"BG\"\n\"WR\"\ntrue\n0\n1\n\"RG\"\n5\ntrue\n10\n0.54\n0\n\n\n\"BLB\"\n\"PremierDraft\"\n\"deaa4cdcd3e84d8e8b5a0ea34a0f9d…\n2024-07-30 22:30:39\n2024-07-30 23:13:12\n0\n2\n1\n\"gold\"\n\"None\"\n\"BG\"\n\"WR\"\ntrue\n0\n0\n\"WG\"\n10\ntrue\n10\n0.54\n0\n\n\n\"BLB\"\n\"PremierDraft\"\n\"deaa4cdcd3e84d8e8b5a0ea34a0f9d…\n2024-07-30 22:30:39\n2024-07-30 23:29:06\n0\n3\n1\n\"gold\"\n\"None\"\n\"BG\"\n\"WR\"\ntrue\n1\n0\n\"WB\"\n11\nfalse\n10\n0.54\n0\n\n\n\"BLB\"\n\"PremierDraft\"\n\"deaa4cdcd3e84d8e8b5a0ea34a0f9d…\n2024-07-30 22:30:39\n2024-07-30 23:46:30\n0\n4\n1\n\"gold\"\n\"None\"\n\"BG\"\n\"WR\"\nfalse\n0\n0\n\"BG\"\n10\ntrue\n10\n0.54\n0\n\n\n\"BLB\"\n\"PremierDraft\"\n\"deaa4cdcd3e84d8e8b5a0ea34a0f9d…\n2024-07-30 22:30:39\n2024-07-30 23:55:34\n0\n5\n1\n\"gold\"\n\"None\"\n\"BG\"\n\"WR\"\nfalse\n0\n0\n\"BR\"\n6\nfalse\n10\n0.54\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3 ## Turn Conuts"
  },
  {
    "objectID": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#builds",
    "href": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#builds",
    "title": "Bloomburrow (BLB) Arena Draft Analysis",
    "section": "5.2 Builds",
    "text": "5.2 Builds"
  },
  {
    "objectID": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#starting-player",
    "href": "notebooks/02-draft-data/02-30-draft-eda-BLB-games.html#starting-player",
    "title": "Bloomburrow (BLB) Arena Draft Analysis",
    "section": "5.3 Starting Player",
    "text": "5.3 Starting Player"
  }
]